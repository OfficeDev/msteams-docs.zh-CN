### YamlMime:Tutorial
title: 使用 JavaScript 生成第一个应用
metadata:
  title: 使用 JavaScript 的 Hello World
  description: 本教程介绍如何使用 JavaScript 生成 Hello World 应用。
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: 返回到入门概述
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 831c0cf8cb21c8736ea93746ce6334f15e79ecdc
  ms.sourcegitcommit: 2fdca6fb0ade3f6b460eb9a4dfea0a8e2ab8d3b9
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 03/08/2022
  ms.locfileid: "63356489"
items:
- durationInMinutes: 1
  content: "开始使用Microsoft Teams一个应用开始Teams开发。 你将创建三个Teams应用：选项卡应用、机器人应用和消息传递扩展应用。 \n\n每个应用都有一个功能，该功能附带自己的 UI 和 UX：\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"显示此应用程序的图表具有三个功能。\" border=\"false\":::\n\n> [!NOTE]\n> 在本教程中，你将首先创建选项卡应用，然后创建机器人应用，然后创建消息传递扩展应用。 但是，你可以选择首先构建具有任何功能的应用，而不要妨碍其他应用的功能。\n\n在本教程中，你将了解：\n\n- 如何使用项目设置Teams Toolkit。\n- 如何构建三个应用，每个应用具有不同的功能：选项卡、机器人和消息传递扩展。\n- 应用的结构：\n    - 使用 JavaScript 的选项卡部分React。\n    - 其余功能及Node.js。\n- 如何部署应用\n"
- title: 先决条件
  durationInMinutes: 1
  content: "\n以下是生成和部署应用所需的工具列表。\n\n| &nbsp; | 安装 | 对于使用... |\n| --- | --- | --- |\n| **Required** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams 工具包](#install-the-teams-toolkit) | 一Microsoft Visual Studio代码扩展，为你的应用创建项目基架。 使用最新版本。 |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams通过聊天、会议、呼叫等应用与协作的每个人进行协作- 全部在一处。|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | 后端 JavaScript 运行时环境。 使用最新的 v14 LTS 版本。|\n| &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (推荐) [Google Chrome](https://www.google.com/chrome/) | 具有开发人员工具的浏览器。 |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript、TypeScript 或 SharePoint 框架 (SPFx) 生成环境。 使用版本 1.55 或更高版本。 |\n| **可选** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) and [Azure CLI](/cli/azure/install-azure-cli) | Azure 工具，用于访问已存储数据或在 Azure 中为 Teams 应用部署基于云的后端。 |\n| &nbsp; | [React MicrosoftEdge 的 Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) 开发人员工具或 [React 开发人员工具&nbsp;](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | 开放源代码 JavaScript 库的浏览器 DevTools React。 |\n| &nbsp; | [Microsoft Graph 浏览器](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph资源管理器，一种基于浏览器的工具，允许你从 Microsoft 运行查询Graph数据。 |\n| &nbsp; | [Teams 开发人员门户](https://dev.teams.microsoft.com/) | 基于 Web 的门户，用于配置、管理和分发你的 Teams 应用，包括你的组织或 Teams 商店。 |\n\n\n> [!TIP]\n> 如果你使用 Microsoft Graph数据，你应该了解 Microsoft Graph Explorer 并添加书签。 此基于浏览器的工具允许你在应用Graph查询 Microsoft 帐户。\n\n\n## <a name=\"prepare-development-environment\"></a>准备开发环境\n\n安装所需工具后，设置开发环境。\n\n\n### <a name=\"install-the-teams-toolkit\"></a>安装Teams Toolkit\n\n该Teams Toolkit使用工具为应用预配和部署云资源、发布到 Teams 应用商店等，帮助简化开发过程。 \n \n你可以将工具包与 Visual Studio Code 或 CLI (命令行接口) ，称为 `TeamsFx`。\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. 打开Visual Studio Code并选择\"扩展\"视图 ( **Ctrl+Shift+X** / **⌘⇧-X**\"或\"查看 > **Extensions**) \"。\n1. 在搜索框中，输入\"**Teams Toolkit\"**。\n1. 选择 **\"** 安装\"旁边的Teams Toolkit。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscode.png\" alt-text=\"插图显示Teams Toolkit扩展安装。\" border=\"false\":::\n\n the Teams Toolkit icon appears in the Visual Studio Code sidebar after it's installed.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"插图显示Teams Toolkit边Visual Studio Code图标。\" border=\"false\":::\n\n您还可以在 Teams Toolkit 上找到Visual Studio Code[应用程序](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension)。\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n若要安装 TeamsFx CLI，请使用程序包 `npm` 管理器：\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n根据您的配置，您可能需要使用 安装 `sudo` CLI：\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\n此情况在 Linux 和 macOS 系统上更为常见。\n\n确保将 npm 全局缓存添加到 PATH。 此步骤通常作为安装程序的一Node.js完成。  \n\n可以将 CLI 与 命令一 `teamsfx` 同使用。 通过运行 验证命令是否正常工作 `teamsfx -h`。\n\n> [!CAUTION]\n> 必须先为 PowerShell 启用\"远程签名\"执行策略，然后才能在 PowerShell 终端中运行 TeamsFx。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>设置开发Teams租户\n\n租户 **就像** 租户中的空间或组织的容器，Teams聊天、共享文件和运行会议。 此空间也是旁加载和测试应用的地方。 让我们验证你是否已准备好使用租户进行开发。\n\n### <a name=\"check-for-sideloading-option\"></a>检查旁加载选项\n\n创建应用后，必须在不分配应用的情况下Teams加载应用。 此过程称为旁加载。 登录到你的 Microsoft 365 帐户以查看此选项。\n\n > [!NOTE]\n > 在本地环境中预览和测试应用时，需要Teams旁加载。 如果未启用，将无法在本地预览和测试Teams应用。\n\n你已拥有租户，是否具有管理员访问权限？ 让我们看一下你是否确实要这样做！\n\n验证你能否在应用中旁加载Teams：\n\n 1. 在 Teams 客户端中，选择 **\"应用商店\"** 图标。\n 1. 选择 **\"管理应用\"**。\n 1. 选择 **\"发布应用\"**。\n 1. 查找自定义应用 **Upload选项**。 如果看到 选项，则启用旁加载应用。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"插图显示用于将自定义应用上传到 Teams。\":::\n\n     > [!NOTE]\n     > 如果无法选择上传自定义应用，请与管理员Teams联系。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>创建一个Teams开发人员租户 (可选) \n\n如果你没有开发者帐户Teams，可以免费获取它。 加入Microsoft 365开发人员计划！\n\n1. 转到开发人员[Microsoft 365计划](https://developer.microsoft.com/microsoft-365/dev-program)。\n1. 选择 **立即加入** 并按照屏幕上的说明进行操作。\n1. 在欢迎屏幕中，选择 **\"设置 E5 订阅\"**。\n1. 设置管理员帐户。 完成后，将显示以下屏幕。\n\n    :::image type=\"content\" source=\"~/assets/images/build-your-first-app/dev-program-subscription.png\" alt-text=\"注册开发人员计划后看到Microsoft 365的示例。\":::\n\n1. 使用刚Teams的管理员帐户登录登录。 验证你已Upload **自定义应用** 选项Teams。\n\n## <a name=\"get-a-free-azure-account\"></a>获取免费的 Azure 帐户\n\n如果你想要在 Azure 中托管应用或访问资源，则必须拥有 Azure 订阅。 [在开始之前创建](https://azure.microsoft.com/free/) 一个免费帐户。\n\n现在，你已获得所有工具并设置你的帐户。 接下来，让我们设置开发环境并开始构建！ 选择你想要首先执行的应用。\n"
- title: 为选项卡应用创建项目工作区
  durationInMinutes: 1
  content: "\n通过Microsoft Teams一个应用开始开发应用。 此应用程序使用 Tab 功能。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-tab/your-helloworld-app-tab.png\" alt-text=\"显示此应用程序的图表具有三个功能。选项卡突出显示。\" border=\"false\":::\n\n在此页中，你将了解：\n1. [如何使用新选项卡项目设置Teams Toolkit](#create-your-tab-project-workspace)\n1. [关于应用的目录结构](#take-a-tour-of-the-tab-app-source-code)\n\n## <a name=\"create-your-tab-project-workspace\"></a>创建选项卡项目工作区\n\n如果先决条件已就位，让我们开始吧！\n\n> [!NOTE]\n> 显示Visual Studio Code UI 来自 Mac。 它可能因操作系统、Teams Toolkit版本和环境而不同。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. 打开 Visual Studio 代码。\n1. 选择Teams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::栏中的Visual Studio Code图标。\n\n1. 选择 **创建新的 Teams 应用**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams 工具包边栏中&quot;创建新项目&quot;链接的位置。\" border=\"false\":::\n\n1. 选择 **\"新建Teams应用**\"以使用\"新建Teams Toolkit\"。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"向导开始创建新项目\" border=\"false\":::\n\n1. 确保 **已选择\"** 选项卡\"作为你想要在应用中构建的功能。 选择“**确定**”。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-capabilities-tab.png\" alt-text=\"选择应用功能\" border=\"false\":::\n\n1. 选择 **JavaScript** 作为编程语言。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-language-tab.png\" alt-text=\"显示如何选择编程语言的屏幕截图。\" border=\"false\":::\n\n1. 输入 `helloworld` 作为应用程序名称。 确保只使用字母数字字符。 选择 **Enter** 继续。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/enter-name-tab.png\" alt-text=\"显示在何处输入应用名称的屏幕截图。\" border=\"false\":::\n\n    the Teams tab app is created in a few seconds.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/app-created.png\" alt-text=\"显示已创建应用的屏幕截图。\" border=\"false\":::\n\n    创建应用后，Teams Toolkit显示一条消息，指示创建项目工作区的位置。 此文件夹是在设置中指定的Visual Studio Code位置。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"位置消息\":::\n\n    邮件提供两个选项：\n    \n    - **更改位置**\n    - **本地调试**\n    \n    对于本教程，你无需使用这些选项。\n\n    > [!NOTE]\n    > 如果选择更改工作区的位置，则只会对在重新加载项目后创建的项目Visual Studio Code。 现有项目的位置没有变化。\n\n    <details>\n    <summary>快速回顾一下创建Teams应用。</summary>\n    观看此简短回顾，Teams应用。\n\n    ![创建Teams应用](~/assets/videos/javascript-tab-app.gif) </details>\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n使用 `teamsfx` CLI 创建你的第一个项目。 从要创建项目文件夹的文件夹开始。\n\n``` bash\nteamsfx new\n```\n\n可以使用 CLI 创建新的 Teams 应用。 CLI 将引导你完成一系列问题。 每个问题都包括一条有关回答它的说明。\n\n例如，使用箭头键选择一个选项。 做出选择后，选择 **Enter** 进行确认。\n\n1. 选择 **创建新的 Teams 应用**。\n1. 选择 **Tab** 功能。\n1. 选择 **Azure** 前端托管。\n1. 不要选择任何云资源。\n1. 选择 **JavaScript** 作为编程语言。\n1. 按 **Enter** 选择默认工作区文件夹。\n1. 输入 `helloworld` 作为应用的名称。 应用的名称必须只有字母数字字符。\n\n  回答所有问题后，将创建项目。\n\n---\n\n## <a name=\"take-a-tour-of-the-tab-app-source-code\"></a>浏览选项卡应用源代码\n\nTeams Toolkit提供用于生成应用的所有组件。 创建项目后，可以查看项目资源管理器区域中的项目文件夹和Visual Studio Code。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/hw-folder-structure-tab.png\" alt-text=\"Project中具有 Tab 功能的应用搭建Visual Studio Code。\":::\n\n尽管你可以自由地选择任何 UI 框架 (或不在任何用户界面) ，但此示例模板代码提供了一个包含React基架。\n\n在此目录结构的其他项中，Toolkit维护：\n\n| 文件夹名 | 目录 |\n| --- | --- |\n| `.fx/configs` | 用户可以为应用自定义的Teams文件。 |\n| - `.fx/configs/config.<envName>.json` | 每个环境的配置文件。 |\n| - `.fx/configs/azure.parameters.<envName>.json` | 每个环境的 Azure BICEP 设置的参数文件。 |\n| - `.fx/configs/projectSettings.json` | 适用于所有环境的全局项目设置。 |\n| - `.fx/configs/localSettings.json` | 用于本地调试的配置文件。 |\n| - `.fx/states` | 设置由应用程序生成的Teams Toolkit。  该工具包在您为应用预配资源后创建此文件夹。 |\n| - `.fx/states/state.<envName>.json` | 预配每个环境的输出文件。 |\n| - `.fx/states/<env>.userdata` | 每个环境的预配输出的敏感用户数据。 |\n| `tabs` | 运行时所需的 Tab 功能的代码，例如隐私声明、使用条款和配置选项卡。 |\n| - `tabs/src/index.jsx` | 前端应用的入口点，其中呈现主应用组件 `ReactDOM.render()` |\n| - `tabs/src/components/App.jsx` | 处理应用中的 URL 路由的代码。 它调用了 [JavaScript 客户端 SDK](../msteams-platform/tabs/how-to/using-teams-client-sdk.md) 应用和团队之间建立通信。 |\n| - `tabs/src/components/Tab.jsx` | 用于实现应用 UI 的代码。 |\n| - `tabs/src/components/TabConfig.jsx` | 用于实现配置应用的 UI 的代码。 |\n| `templates/appPackage` | 应用清单模板文件以及应用图标：color.pngoutline.png。 |\n| - `templates/appPackage/manifest.local.template.json` | 用于在本地环境中运行应用的应用清单  |\n| - `templates/appPackage/manifest.remote.template.json` | 在远程环境（如 Azure 网站）中运行应用的应用清单 |\n| `templates/azure` | BICEP 模板文件 |\n|\n\n添加云功能时，Teams Toolkit向项目添加必要的文件夹。 该 `api` 文件夹将保留你编写的任何 Azure 函数的代码。\n"
- title: 生成并运行你的第一个选项卡应用
  durationInMinutes: 1
  content: "\n使用选项卡设置项目工作区Teams Toolkit，生成选项卡项目。 你需要登录到你的帐户Microsoft 365帐户。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>登录到你的 Microsoft 365 帐户\n\n使用 Microsoft 365 帐户登录Teams。 如果你使用的是开发人员计划Microsoft 365，你在注册时设置的管理员帐户就是你的Microsoft 365帐户。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. 打开 Visual Studio 代码。\n1. 选择Teams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::栏中的\"显示图标\"。\n1. 选择 **\"登录 M365\"**。\n\n    将打开默认 Web 浏览器，以允许登录帐户。\n\n1. 使用凭据Microsoft 365帐户。\n1. 当系统提示时关闭浏览器并返回到Visual Studio Code。\n1. 返回到Teams Toolkit中的Visual Studio Code。\n\n    边栏的 **\"** 帐户\"部分显示你的Microsoft 365帐户名称。 Teams Toolkit **帐户启用了旁加载**，则显示旁加载Microsoft 365启用。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"显示登录到 azure 和 azure Microsoft 365的屏幕截图。\" border=\"false\":::\n\n    现在，你已准备好生成应用，并在本地环境中运行它！\n\n# <a name=\"command-line\"></a>[命令行](#tab/cline)\n\n1. 登录以Microsoft 365 TeamsFx CLI：\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    将打开默认 Web 浏览器，以允许登录帐户。 使用凭据登录 Azure 帐户。 系统提示时关闭浏览器。\n\n2. 使用 TeamsFx CLI 登录 Azure：\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    将打开默认 Web 浏览器，以允许登录帐户。 使用凭据登录 Azure 帐户。 系统提示时关闭浏览器。\n\n    帐户登录名在 Visual Studio Code TeamsFx CLI 之间共享。\n\n    现在已配置开发环境，你可以创建、生成和部署你的第一个Teams应用程序。\n\n---\n\n## <a name=\"build-and-run-your-app-locally-in-visual-studio-code\"></a>在 Visual Studio Code 本地生成和运行应用\n\n若要在本地构建和运行应用，请执行：\n\n1. 从Visual Studio Code，选择 **F5** 以在调试模式下运行应用程序。\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>在本地调试器中运行应用时，了解会发生什么情况。</summary>\n\n    如果想知道，按 **F5** 键时，Teams Toolkit：\n\n    - 向应用注册Azure Active Directory。 此应用具有加载应用的位置和后端资源的权限。\n    - *在应用程序中* 旁加载Teams。\n    - 使用 Azure 函数核心工具启动本地运行的应用 [后端](/azure/azure-functions/functions-run-local?#start)。\n    - 在本地托管应用前端。\n    - 使用命令Microsoft Teams启动 Web 浏览器中的 Teams，以从 旁加载应用`https://localhost:3000/tab`。 此 URL 在应用的清单中注册。\n    - 生成应用清单，存在于 Teams 开发人员门户中。 Teams 使用应用清单告诉已连接客户端从何处加载应用。\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/f5-build-and-run.png\" alt-text=\"显示按下 F5 键时屏幕截图。\":::\n\n    > [!NOTE]\n    > 首次运行应用时，将下载所有依赖项，并生成应用。 生成完成后将打开浏览器窗口。 此过程可能需要 3-5 分钟才能完成。\n\n    如果需要，工具包会提示你安装本地证书。 此证书允许 Teams 从 `https://localhost`。\n\n1. 如果 **显示** 以下对话框，请选择\"是\"：\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/ssl-prompt.png\" alt-text=\"Screenshot showing the prompt to install an SSL certificate to enable Teams to load your application from localhost.\":::\n\n    或者， **根据您的** 操作系统选择\"继续\"：\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/ssl-prompt-mac.png\" alt-text=\"Screenshot showing the prompt to install an SSL certificate to enable Teams to load your application from localhost on Mac.\":::\n\n    Teams Web 客户端将在浏览器窗口中打开。\n\n1. 如果系统提示，Microsoft 365帐户登录。\n\n1. 当 **系统** 提示将应用旁加载到本地计算机上Teams选择\"添加\"。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/add-tab-app-local-debug.png\" alt-text=\"将应用添加到Teams\":::\n\n1. 恭喜！你的第一个应用正在 Teams！\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-local-debug.png\" alt-text=\"已完成应用的屏幕截图\":::\n\n1. 浏览页面以查看用户详细信息。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-local-authorize.png\" alt-text=\"选项卡上的用户信息部分屏幕截图\":::\n    \n1. 选择 **\"** 授权\"，让应用使用 Microsoft Graph 检索用户详细信息。\n\n    应用程序请求授予显示用户详细信息的权限。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-graph-permission.png\" alt-text=\"授权应用访问用户详细信息的屏幕截图\":::\n\n1. 选择 **\"接受** \"，让应用访问用户详细信息。\n\n    你的照片和详细信息将显示在个人选项卡中。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-user-info.png\" alt-text=\"选项卡上的用户信息的屏幕截图\":::\n\n    你可以执行正常的调试活动，例如设置断点，就像任何其他 Web 应用程序一样。 该应用支持热重新加载。 如果更改了项目内的任何文件，将重新加载页面。\n\n  <!-- markdownlint-disable MD033 -->\n\n  <details>\n  <summary>了解如何解决应用不在本地运行的问题。</summary>\n\n  若要在 Teams 中成功运行你的应用，请确保在你的 Teams 帐户中启用旁加载。 可以在先决条件部分了解有关旁加载的更多内容。\n\n  </details>\n\n  你了解如何使用Toolkit设置选项卡应用并在本地运行它。 接下来，了解如何使用聊天聊天机器人生成Toolkit！\n"
- title: 为自动程序应用创建项目工作区
  durationInMinutes: 1
  content: "\n你已生成选项卡应用。 现在，让我们创建你的第一个自动程序应用。\n\n聊天机器人功能Teams聊天机器人或对话机器人。 可使用它运行简单的自动化任务，如提供客户服务。 机器人与 Web 服务对话，并帮助你使用其产品/服务。 你可以获取天气预报、预订或使用对话机器人提供的其他服务。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"显示此应用程序的图表具有三个功能。自动程序突出显示。\" border=\"false\":::\n\n由于你已准备创建这些应用，因此你可以设置一个新的Teams创建自动程序应用的项目。\n\n在本教程中，你将了解：\n\n1. [如何使用自动程序设置新的自动程序Teams Toolkit。](#create-your-bot-project-workspace)\n1. [关于应用项目的目录结构。](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> 目前，自动程序政府社区云 (GCC) DOD GCC-High和国防部 (提供) 。\n\n## <a name=\"create-your-bot-project-workspace\"></a>创建自动程序项目工作区\n\n如果先决条件已就位，让我们开始吧！\n\n> [!NOTE]\n> 显示Visual Studio Code UI 来自 Mac。 它可能因操作系统、Teams Toolkit版本和环境而不同。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. 打开 Visual Studio 代码。\n1. 选择Teams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::栏中的Visual Studio Code图标。\n\n1. 选择 **创建新的 Teams 应用**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams 工具包边栏中&quot;创建新项目&quot;链接的位置。\" border=\"false\":::\n\n1. 选择 **\"新建Teams应用**\"，以使用\"新建Teams Toolkit\"。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"&quot;创建新项目&quot;的向导启动\" border=\"false\":::\n\n1. 选择 **\"自动** 程序\"，取消选择 **\"选项卡**\"，然后选择\"确定 **\"**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-capabilities-bot.png\" alt-text=\"显示如何向新应用添加功能的屏幕截图。\" border=\"false\":::\n\n1. 在 **\"编程语言** \" **部分选择\"JavaScript** \"。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-bot.png\" alt-text=\"显示如何选择编程语言的屏幕截图。\" border=\"false\":::\n\n1. 为应用输入合适的名称，如 `hellobot`。 确保应用名称为字母数字。 选择 **Enter** 继续。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/enter-name-bot.png\" alt-text=\"显示在何处输入应用名称的屏幕截图。\" border=\"false\":::\n\n    你的Teams自动程序功能的应用在几秒后创建。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"显示已创建应用的屏幕截图。\" border=\"false\":::\n\n    创建应用后，Teams Toolkit显示一条消息，指示创建项目工作区的位置。 此文件夹是在设置中指定的Visual Studio Code位置。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"位置消息\":::\n\n    邮件提供两个选项：\n    \n    - **更改位置**\n    - **本地调试**\n    \n    对于本教程，你无需使用这些选项。\n\n    > [!NOTE]\n    > 如果选择更改工作区的位置，则只会对在重新加载项目后创建的项目Visual Studio Code。 现有项目的位置没有变化。\n\n<details>\n<summary>快速回顾一下创建Teams应用。</summary>\n观看此简短回顾，Teams应用。\n\n![创建Teams应用](~/assets/videos/javascript-bot-app.gif)\n</details>\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n使用 `teamsfx` CLI 创建你的第一个项目。  从要创建项目文件夹的文件夹开始。\n\n``` bash\nteamsfx new\n```\n\n可以使用 CLI 创建新的 Teams 应用。 CLI 将引导你完成一系列问题。 每个问题都包括一条有关回答它的说明。\n\n例如，使用箭头键选择一个选项。 做出选择后，选择 **Enter** 进行确认。\n\n1. 选择 **创建新的 Teams 应用**。\n1. 选择 **\"自动** 程序\"，然后取消选择 **\"选项卡\"**。\n1. 选择 **JavaScript** 作为编程语言。\n1. 选择 **Enter** 以选择默认工作区文件夹。\n1. 为应用输入合适的名称，如 `HelloBot`。  应用的名称只能包含字母数字字符。\n\n回答所有问题后，将创建项目。\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>浏览自动程序应用源代码\n\n基架搭建完成后，在浏览器的资源管理器区域中查看项目Visual Studio Code。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/hw-folder-structure-bot.png\" alt-text=\"Project中为自动程序搭建Visual Studio Code。\" border=\"false\":::\n\n| 文件夹名 | 目录 |\n| --- | --- |\n| `.fx/configs` | 用户可以为应用自定义的Teams文件。 |\n| `.fx/configs/config.<envName>.json` | 每个环境的配置文件。 |\n| `.fx/configs/azure.parameters.<envName>.json` | 每个环境的 Azure BICEP 设置的参数文件。 |\n| `.fx/configs/projectSettings.json` | 适用于所有环境的全局项目设置。 |\n| `.fx/configs/localSettings.json` | 用于本地调试的配置文件。 |\n| `.fx/states` | 由应用程序生成的设置Toolkit。  该工具包在您为应用预配资源后创建此文件夹。 |\n| `.fx/states/state.<envName>.json` | 预配每个环境的输出文件。 |\n| `.fx/states/<env>.userdata` | 每个环境的预配输出的敏感用户数据。 |\n| `bot` |  运行时所需的 Bot 功能的代码。 |\n| `bot/teamsBot.js` | 自动程序应用的主要入口点。 |\n| `templates/appPackage` | 应用清单模板文件以及应用图标、color.pngoutline.png。 |\n| `templates/appPackage/manifest.local.template.json` | 用于在本地环境中运行应用的应用清单  |\n| `templates/appPackage/manifest.remote.template.json` | 在远程环境（如 Azure 站点）中运行应用的应用清单 |\n| `templates/azure` | BICEP 模板文件 |\n\n> [!Tip]\n> 在将第一个机器人集成到 Teams 中之前，请熟悉 Teams 以外的机器人。\n"
- title: 生成并运行你的第一个自动程序应用
  durationInMinutes: 1
  content: "\n使用自动程序设置项目工作区Teams Toolkit，生成自动程序项目。 确保你已登录到你的Microsoft 365帐户。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>登录到你的 Microsoft 365 帐户\n\n使用此帐户登录Teams。 如果你使用的是开发人员计划Microsoft 365，你在注册时设置的管理员帐户就是你的Microsoft 365帐户。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. 打开 Visual Studio 代码。\n1. 选择边Teams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::图标。  \n1. 选择 **\"登录 M365\"**。\n\n    将打开默认 Web 浏览器，以允许登录帐户。\n\n1. 使用凭据Microsoft 365帐户。\n1. 当系统提示时关闭浏览器并返回到Visual Studio Code。\n1. 返回到Teams Toolkit中的Visual Studio Code。\n\n    使用此帐户登录Teams。 如果你使用的是开发人员计划Microsoft 365，你在注册时设置的管理员帐户就是你的Microsoft 365帐户。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"显示登录到 azure 和 azure Microsoft 365的屏幕截图。\" border=\"false\":::\n\n    现在，你已准备好生成应用并在本地运行它了！\n\n# <a name=\"command-line\"></a>[命令行](#tab/cline)\n\n1. 登录以Microsoft 365 TeamsFx CLI：\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    将打开默认 Web 浏览器，以允许登录帐户。 使用凭据登录 Azure 帐户。 系统提示时关闭浏览器。\n\n2. 使用 TeamsFx CLI 登录 Azure：\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    将打开默认 Web 浏览器，以允许登录帐户。 使用凭据登录 Azure 帐户。 系统提示时关闭浏览器。\n\n    帐户登录名在 Visual Studio Code TeamsFx CLI 之间共享。\n\n    现在已配置开发环境，你可以创建、生成和部署你的第一个Teams应用程序。\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>在本地生成并运行你的第一个自动程序应用\n\n若要在本地环境中生成和运行应用，请执行以下操作：\n\n1. 选择 **F5** Visual Studio Code以在调试模式下运行你的应用。\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>在本地调试器中运行应用时，了解会发生什么情况。</summary>\n\n    如果想知道，按 **F5** 键时，Teams Toolkit：\n\n    - 向应用注册Azure Active Directory。 此应用具有加载应用的位置和后端资源的权限。\n    - *在应用程序中* 旁加载Teams。\n    - 使用 Azure 函数核心工具启动本地运行的应用 [后端](/azure/azure-functions/functions-run-local?#start)。\n    - 在本地托管应用前端。\n    - 使用命令Microsoft Teams启动 Web 浏览器中的 Teams，以从 旁加载应用`https://localhost:3000/tab`。 此 URL 在应用的清单中注册。\n    - 生成应用清单，存在于 Teams 开发人员门户中。 Teams 使用应用清单告诉已连接客户端从何处加载应用。\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"显示何时按 F5 键进行调试的屏幕截图。\":::\n\n    > 首次运行应用时，将下载所有依赖项，并生成应用。 编译完成后，将自动打开浏览器窗口。 此过程可能需要 3-5 分钟才能完成。\n\n    Web 浏览器开始运行该应用。\n\n1. 如果系统提示，Microsoft 365帐户登录。\n\n1. 当 **系统** 提示将应用旁加载到本地计算机上Teams选择\"添加\"。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"Screenshot showing the bot is added on Teams client.\":::\n\n    现在自动程序已成功在 Teams！ 加载应用后，将打开与机器人的聊天会话。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"Screenshot showing the bot is running on Teams client.\":::\n\n    可以键入 以显示 `welcome` 简介卡片，并键入 `learn` 以转到自适应卡片和自动程序命令文档。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"Screenshot showing the learn card in the bot on Teams client.\":::       \n\n    你可以像任何其他 Web 应用程序一样执行正常的调试活动，例如设置断点。 打开 `bot/teamsBot.js` 文件并找到 `onMessage()` 方法。 在任何案例上设置断点。 然后，键入一些文本。\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>了解如何解决应用不在本地运行的问题。</summary>\n\n  若要在 Teams 中成功运行你的应用，请确保在你的 Teams 帐户中启用旁加载。 可以在先决条件部分了解有关旁加载的更多内容。\n\n  > [!IMPORTANT]\n  > 目前，旁加载应用在 政府社区云 (GCC) 、GCC-High 和 DOD 中可用。\n\n  > [!TIP]\n  > 使用应用验证工具旁加载应用前 [检查问题](https://dev.teams.microsoft.com/appvalidation.html)。 此工具包含在工具包中。 修复错误以旁加载应用。\n  </details> \n"
- title: 为邮件扩展应用创建项目工作区
  durationInMinutes: 1
  content: "\n你已生成自动程序应用。 现在，让我们创建你的第一个消息传递扩展应用。\n\nMessaging Extension 功能允许你与 Web 服务交互。 使用客户端中的撰写区域、命令框或消息Teams在外部系统中搜索和启动操作。\n\n  :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-msgext/your-helloworld-app-msgext.png\" alt-text=\"显示此应用程序的图表具有三个功能。邮件扩展突出显示。\" border=\"false\":::\n\n有两种类型的 Teams **消息扩展**：\n\n- [搜索命令](../msteams-platform/messaging-extensions/how-to/search-commands/define-search-command.md)：可以搜索外部系统。 然后，可以将其结果以卡片的形式插入到邮件中。\n- [操作](../msteams-platform/messaging-extensions/how-to/action-commands/define-action-command.md)命令：你可以向用户显示用于收集或显示信息的模式弹出窗口。 然后，你可以处理其交互并将信息发送回Teams。\n\n让我们使用搜索命令创建一个消息传递扩展 *应用*。 使用它搜索外部数据，并将结果插入到客户端Teams消息。\n\n由于你已准备创建这些应用，因此你可以设置一个新的Teams项目来创建邮件扩展应用。\n\n> [!NOTE]\n> 消息扩展依赖于自动程序，在用户和你的代码之间提供对话框。\n\n\n在本教程中，你将了解：\n\n1. [如何使用新邮件扩展项目设置Teams Toolkit。](#create-your-messaging-extension-project-workspace)\n1. [关于应用项目的目录结构。](#take-a-tour-of-the-messaging-extension-app-source-code)\n\n## <a name=\"create-your-messaging-extension-project-workspace\"></a>创建邮件扩展项目工作区\n\n如果先决条件已就位，让我们开始吧！\n\n> [!NOTE]\n> 显示Visual Studio Code UI 来自 Mac。 它可能会有所不同，具体取决于你的操作系统、Toolkit版本和环境。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. 打开 Visual Studio 代码。\n1. 选择Teams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::栏中的Visual Studio Code图标。\n\n1. Select **Create New Project** from the left-side of the Toolkit.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams 工具包边栏中&quot;创建新项目&quot;链接的位置。\" border=\"false\":::\n\n1. 选择 **\"新建Project**\"以使用\"新建\"Teams Toolkit。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"&quot;创建新项目&quot;的向导启动\" border=\"false\":::\n\n1. 选择 **\"消息扩展**\"，取消选择 **\"选项卡**\"，然后选择\"确定 **\"**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-capabilities-mex.png\" alt-text=\"显示如何向新应用添加功能的屏幕截图。\" border=\"false\":::\n\n1. 选择 **JavaScript** 作为编程语言。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-language-mex.png\" alt-text=\"显示如何选择编程语言的屏幕截图。\" border=\"false\":::\n\n1. 为应用输入一个合适的名称。 确保应用名称为字母数字。 选择 **Enter** 继续。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/enter-name-mex.png\" alt-text=\"显示如何输入应用名称的屏幕截图。\" border=\"false\":::\n\n    Teams Toolkit几秒后创建应用。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png\" alt-text=\"显示已创建应用的屏幕截图。\" border=\"false\":::\n\n    创建应用后，Teams Toolkit显示一条消息，指示创建项目工作区的位置。 这是在设置中指定的默认Visual Studio Code位置。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"位置消息\":::\n\n    邮件提供两个选项：\n    \n    - **更改位置**\n    - **本地调试**\n    \n    对于本教程，你无需使用这些选项。\n\n    > [!NOTE]\n    > 如果选择更改工作区的位置，则只会对在重新加载项目后创建的项目Visual Studio Code。 现有项目的位置没有变化。\n\n  <details>\n  <summary>快速回顾一下创建Teams应用。</summary>\n  观看此简短回顾，Teams应用。\n\n  ![创建Teams应用](~/assets/videos/javascript-msg-ext-app.gif)\n  </details>\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n使用 `teamsfx` CLI 创建你的第一个项目。 从要创建项目文件夹的文件夹开始。\n\n``` bash\nteamsfx new\n```\n\n可以使用 CLI 创建新的 Teams 应用。 CLI 将引导你完成一系列问题。 每个问题都包括一条有关回答它的说明。\n\n例如，使用箭头键选择一个选项。 做出选择后，选择 **Enter** 进行确认。\n\n\n1. 选择 **创建新的 Teams 应用**。\n1. 选择 **\"邮件扩展** \"，然后取消选择 **\"选项卡\"**。\n1. 选择 **JavaScript** 作为编程语言。\n1. 选择 **Enter** 以选择默认工作区文件夹。\n1. 为应用输入合适的名称，如 `HelloMsgExtn`。  应用的名称只能包含字母数字字符。\n\n  在回答所有问题后，将创建项目。\n\n---\n\n## <a name=\"take-a-tour-of-the-messaging-extension-app-source-code\"></a>浏览邮件扩展应用源代码\n\n消息传递扩展使用 Bot Framework。 可使用它通过对话与服务交互。 基架搭建完成后，在浏览器的资源管理器区域中查看项目Visual Studio Code。\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/hw-folder-structure-mex.png\" alt-text=\"自动程序项目的文件布局\" border=\"false\":::\n\n| 文件夹名 | 目录 |\n| --- | --- |\n| `.fx/configs` | 用户可以为应用自定义的Teams文件。 |\n| `.fx/configs/config.<envName>.json` | 每个环境的配置文件。 |\n| `.fx/configs/azure.parameters.<envName>.json` | 每个环境的 Azure BICEP 设置的参数文件。 |\n| `.fx/configs/projectSettings.json` | 适用于所有环境的全局项目设置。 |\n| `.fx/configs/localSettings.json` | 用于本地调试的配置文件。 |\n| `.fx/states` | 由应用程序生成的设置Toolkit。  该工具包在您为应用预配资源后创建此文件夹。 |\n| `.fx/states/state.<envName>.json` | 预配每个环境的输出文件。 |\n| `.fx/states/<env>.userdata` | 每个环境的预配输出的敏感用户数据。 |\n| `bot` |  运行时所需的自动程序代码。 |\n| `bot/messageExtensionBot.js` | 邮件扩展应用的主入口点。 |\n| `templates/appPackage` | 应用清单模板文件以及应用图标、color.pngoutline.png。 |\n| `templates/appPackage/manifest.local.template.json` | 用于在本地环境中运行应用的应用清单  |\n| `templates/appPackage/manifest.remote.template.json` | 在远程环境（如 Azure 站点）中运行应用的应用清单 |\n| `templates/azure` | BICEP 模板文件 |\n\n> [!Tip]\n> 在将应用集成到 Teams 之前，请熟悉自动程序以及 Teams。\n"
- title: 生成并运行你的第一个消息传递扩展应用
  durationInMinutes: 1
  content: "\n使用项目工作环境设置项目Teams Toolkit，生成项目。 你需要登录到你的帐户Microsoft 365帐户。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>登录到你的 Microsoft 365 帐户\n\n使用此帐户登录Teams。 如果你使用的是开发人员计划Microsoft 365，你在注册时设置的管理员帐户就是你的Microsoft 365帐户。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vcode)\n\n1. 打开 Visual Studio 代码。\n1. 选择边Teams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::图标。  \n1. 选择 **\"登录 M365\"**。\n\n    将打开默认 Web 浏览器，以允许登录帐户。\n\n1. 登录到你的 Microsoft 365 帐户。\n1. 当系统提示时关闭浏览器并返回到Visual Studio Code。\n1. 返回到Teams Toolkit中的Visual Studio Code。\n\n    边栏的 **\"** 帐户\"部分显示你的Microsoft 365帐户名称。 如果Teams Toolkit帐户启用了旁加载，则此Microsoft 365旁加载。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"显示登录到 azure 和 azure Microsoft 365的屏幕截图。\" border=\"false\":::\n\n    现在，你已准备好生成应用并在本地运行它了！\n\n# <a name=\"command-line\"></a>[命令行](#tab/cline)\n\n1. 登录以Microsoft 365 TeamsFx CLI：\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    将打开默认 Web 浏览器，以允许登录帐户。 使用凭据登录 Azure 帐户。 系统提示时关闭浏览器。\n\n2. 使用 TeamsFx CLI 登录 Azure：\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    将打开默认 Web 浏览器，以允许登录帐户。 使用凭据登录 Azure 帐户。 系统提示时关闭浏览器。\n\n    帐户登录名在 Visual Studio Code TeamsFx CLI 之间共享。\n\n    现在已配置开发环境，你可以创建、生成和部署你的第一个Teams应用程序。\n\n---\n\n## <a name=\"build-and-run-your-app-in-the-local-environment\"></a>在本地环境中生成并运行应用\n\n消息传递扩展允许你与 Web 服务交互。 它利用机器人的消息功能和安全通信。 消息扩展应用将添加到注册为自动程序的 Web 服务。 \n\n### <a name=\"build-and-run-your-app-locally\"></a>在本地生成并运行应用\n\n1. 在 **\"Visual Studio Code F5**\"以在调试模式下运行应用程序。\n    <!-- markdownlint-disable MD033 -->\n    <details>\n    <summary>在本地调试器中运行应用时，了解会发生什么情况。</summary>\n\n    选择 **F5 时**，Teams Toolkit：\n\n    1. 向应用程序注册Azure Active Directory。\n    1. 将应用程序注册为\"旁加载\"Teams。\n    1. 使用 Azure 函数核心工具启动本地 [运行的应用程序后端](/azure/azure-functions/functions-run-local?#start)。\n    1. 启动 ngrok 隧道Teams应用进行通信。\n    1. 首先Microsoft Teams命令指示Teams旁加载应用程序。\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5-build-and-run-mex.png\" alt-text=\"显示按 F5 键进行调试的屏幕截图。\":::\n\n    > [!NOTE]\n    > 首次运行应用时，将下载所有依赖项，并生成应用。 生成完成后将打开浏览器窗口。 此过程可能需要 3-5 分钟才能完成。\n\n    Teams在 Web 浏览器中打开。\n    \n1. 如果系统提示，Microsoft 365帐户登录。\n1. 选择 **\"** 添加\"将应用添加到你的帐户。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug.png\" alt-text=\"Screenshot shows message to add the app\" border=\"false\":::\n\n    工具包将显示一条消息，指示应用已添加到Teams。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-added-local-debug.png\" alt-text=\"Screenshot shows message to try the app now or later\" border=\"true\":::\n\n    - 如果你选择 **\"获得它**\"，你可以稍后从旁加载的应用列表中试用该应用。\n    - 如果选择\"**试用\"，** Teams加载你的应用。\n\n1. 选择 **\"试用\"**。\n\n    消息扩展应用在聊天机器人应用中加载。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png\" alt-text=\"显示应用程序中旁加载应用的Teams\" border=\"false\":::\n\n    由于消息传递扩展应用依赖机器人来启用用户和 Web 服务之间的通信，因此你的应用将加载至聊天机器人的聊天功能。\n\n    - 如果你在创建邮件扩展应用之前创建了自动程序应用，你可以看到该应用已加载到你创建的同一自动程序应用中。 以前的聊天消息是可见的。\n    - 如果首先创建了消息传递扩展，则你的应用将加载到在 Teams 上打开的任何聊天中。\n\n### <a name=\"test-your-app\"></a>测试应用\n\n首次加载应用时，邮件扩展应用将打开供你测试。 此示例应用允许你从软件注册表中搜索开源 npm 包。\n\n#### <a name=\"to-run-a-search-query\"></a>运行搜索查询\n\n1. 让我们在搜索框中输入一个搜索字符串，例如\"cli\"。 您将获得匹配项的列表：\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/mex-search-string.png\" alt-text=\"显示如何使用应用进行搜索的屏幕截图\" border=\"true\":::\n\n1. 从搜索结果中选择一个。 它将显示在撰写区域中，以便你可以将结果发送到频道。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-result.png\" alt-text=\"显示搜索结果的屏幕截图\" border=\"false\":::\n\n1. 选择\" **发送\"** 说明。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-sent.png\" alt-text=\"显示聊天时发送的搜索结果的屏幕截图\" border=\"false\":::\n\n    现在，你已了解如何构建和运行基本的消息传递扩展应用！         \n\n## <a name=\"optional-scenarios\"></a>可选方案\n\n你已测试基本邮件扩展应用的搜索功能。 现在，你可以试用此应用的一些其他功能。 这些是此应用中的可选方案。\n<br>\n<br>\n<details>\n<summary>创建卡片</summary>\n\n1. 选择 **\"创建卡片\"**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-added-mex-local-debug.png\" alt-text=\"显示如何创建卡片的屏幕截图\" border=\"false\":::\n\n1. 按如下所示输入卡详细信息，然后选择\"提交 **\"**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-details.png\" alt-text=\"显示如何添加卡片详细信息的屏幕截图\" border=\"true\":::\n\n    你的卡片详细信息显示在撰写区域中。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-added.png\" alt-text=\"显示如何添加卡片详细信息的屏幕截图\" border=\"true\":::\n\n1. 从撰写 **区域** 选择发送图标。\n\n    应用在聊天机器人上发送卡片。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-sent.png\" alt-text=\"显示已发送卡片的屏幕截图\" border=\"false\":::\n</details>\n<br>\n<details>\n<summary>从撰写区域打开应用</summary>\n\n选择下列打开应用的方法之一。\n\n**使用 `@mention`：**\n\n1. 在 `@your-app-name` 应用的命令区域中输入。\n    \n    应用程序将打开搜索框，你可以使用它运行查询。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mention-mex-app.png\" alt-text=\"显示如何@mention扩展应用的屏幕截图\" border=\"false\":::\n\n1. 输入搜索字符串，然后从搜索结果中选择一个。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-box-search.png\" alt-text=\"显示如何使用消息传递扩展应用运行搜索的屏幕截图\" border=\"false\":::\n\n    它在命令区域中显示为卡片。\n\n1. 复制卡片以将其粘贴到撰写区域。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card.png\" alt-text=\"在卡片中显示搜索结果的屏幕截图\" border=\"false\":::\n    \n1. 使用撰写区域发送卡片。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card-sent.png\" alt-text=\"显示聊天中的搜索结果的屏幕截图\" border=\"false\":::\n\n**使用三点图标：**\n\n1. 从撰写区域底部的三个点启动消息传递扩展。\n1. 选择邮件扩展应用。       \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/three-dot-mex.png\" alt-text=\"显示如何打开示例邮件扩展应用的屏幕截图\" border=\"false\":::\n\n    邮件扩展应用加载用于运行搜索和创建自适应卡片的选项。\n</details>\n<br>\n<details>\n<summary>从旁加载的应用运行应用</summary>\n\n你可以从旁加载Teams打开旁加载应用。 \n\n1. Select the **Store** icon from the Teams sidebar.\n1. 选择\" **管理应用\"**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/sideloaded-apps.png\" alt-text=\"显示旁加载应用的屏幕截图\" border=\"false\":::\n\n1. 选择应用的三个点图标，然后选择\" **查看详细信息\"**。 还可以复制指向应用的链接，并使用它打开应用。\n1. 选择 **\"** 打开\"加载应用，然后选择\" **试用\"**。 \n    \n    应用在 Teams 中加载。\n</details>\n<br>\n<br>\n<!-- markdownlint-disable MD033 -->\n<details>\n<summary>了解如何解决应用不在本地运行的问题。</summary>\n\n若要在应用中运行Teams，你必须拥有一个Microsoft 365应用程序旁加载的一个开发帐户。 可以在先决条件部分了解有关旁加载的更多内容。\n</details>\n"
- title: 部署你的第一Teams应用
  durationInMinutes: 1
  content: "\n你已学习了使用选项卡、自动程序Teams扩展功能创建、生成和运行应用。 最后一步是在 Azure 上部署应用。\n\n让我们在 Azure 上部署第一个使用 Tab 功能的应用，Teams Toolkit。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>登录到 Azure 帐户\n\n使用此帐户访问 Microsoft Azure 门户并预配新的云资源以支持你的应用。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. 打开 Visual Studio 代码。\n1. 打开创建选项卡应用的项目文件夹。\n1. 选择边Teams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::图标。  \n1. 选择 **\"登录到 Azure\"**。\n\n    > [!TIP]\n    > 如果已安装 Azure 帐户扩展并使用相同的帐户，可以跳过此步骤。 请使用与其他扩展中相同的帐户。\n\n    将打开默认 Web 浏览器，以允许登录帐户。\n1. 使用凭据登录 Azure 帐户。\n1. 当系统提示时关闭浏览器并返回到Visual Studio Code。\n\n    边栏的 **\"** 帐户\"部分分别显示这两个帐户。 它还列出了可供你使用 Azure 订阅的数量。 确保至少有一个可用的 Azure 订阅可用。 如果没有，请注销并使用其他帐户。\n\n    现在，你已准备好将应用部署到 Azure！\n\n    恭喜！你已创建三种类型的Teams应用！ \n    现在，让我们继续，了解如何使用 Teams Toolkit 将其中一个应用部署到 Azure。\n\n# <a name=\"command-line\"></a>[命令行](#tab/cline)\n\n1. 登录以Microsoft 365 TeamsFx CLI：\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    将打开默认 Web 浏览器，以允许登录帐户。 使用凭据登录 Azure 帐户。 系统提示时关闭浏览器。\n\n2. 使用 TeamsFx CLI 登录 Azure：\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    将打开默认 Web 浏览器，以允许登录帐户。 使用凭据登录 Azure 帐户。 系统提示时关闭浏览器。\n\n    帐户登录名在 Visual Studio Code TeamsFx CLI 之间共享。\n\n    恭喜！你已创建三种类型的Teams应用！ \n    现在，让我们继续，了解如何使用 Teams Toolkit 将其中一个应用部署到 Azure。\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>了解将应用部署到 Azure 时会发生的情况</summary>\n\n  部署之前，应用程序已在本地运行:\n\n  * 后端使用 **Azure Functions Core Tools** 运行。\n  * 应用程序 HTTP 终结点 (Microsoft Teams 在此加载应用程序) 在本地运行。\n\n  部署是一个两步过程。 在活动的 Azure 订阅上预配资源，然后将应用程序的后端和前端代码部署或上载到 Azure。\n\n  * 后端（如果已配置）使用各种 Azure 服务，包括 Azure 应用服务和 Azure 存储。\n  * 将前端应用程序部署到配置用于静态 Web 托管的 Azure 存储帐户。\n\n  </details>\n"
- title: 恭喜！
  durationInMinutes: 1
  content: "\n你已完成操作！\n\n你已创建三个应用，每个应用具有不同的功能：选项卡应用、机器人应用和消息传递扩展应用。\n\n现在，你已经了解了如何创建基本应用，可以继续创建更复杂的应用。 首先，请尝试向现有应用添加功能。\n\n若要向现有应用添加功能：\n\n1. Select **Add capability** from the **Development** section of the Teams Toolkit sidebar.\n\n1. 选择要添加到应用的功能。\n\n就是这么简单。 Teams Toolkit将新功能的基架添加到应用的目录结构中。 按照过程生成和部署应用，你的应用将具有多个功能。 \n\n你已完成使用 JavaScript 生成应用的教程。"
