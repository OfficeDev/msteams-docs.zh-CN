### YamlMime:Tutorial
title: 使用 JavaScript 生成第一个机器人应用
metadata:
  title: 使用 JavaScript Hello World
  description: 通过此学习模块，你将了解如何通过使用 Teams 工具包设置新项目、生成和部署机器人应用来生成 Hello World 应用。
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: 返回入门概述
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: dd4ad049d44db462b0f840716ff92aa494c48204
  ms.sourcegitcommit: c398dfdae9ed96f12e1401ac7c8d0228ff9c0a2b
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 06/30/2022
  ms.locfileid: "66558497"
items:
- durationInMinutes: 1
  content: "使用第一个 Teams 应用启动 Microsoft Teams 应用开发。 你将使用 Teams 创建机器人应用。 \n\n你的应用将具有一个功能，它附带自己的 UI 和 UX：\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"显示此应用有三个功能的示意图。\":::\n\n> [!NOTE]\n> 在本教程中，你将创建一个机器人应用。\n\n在本教程中，你将了解：\n\n- 如何使用 Teams 工具包设置新项目。\n- 如何生成机器人应用。\n- 如何部署应用。\n"
- title: 先决条件
  durationInMinutes: 1
  content: "\n下面是生成和部署应用所需的工具列表。\n\n| &nbsp; | 安装 | 用于使用... |\n| --- | --- | --- |\n| **Required** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams 工具包](#install-the-teams-toolkit) | Microsoft Visual Studio Code扩展，用于为应用创建项目基架。 使用 4.0.0 版本。 |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | 通过聊天、会议、通话等应用与每一位同事进行协作的 Microsoft Teams - 一个地方完成所有操作。|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | 后端 JavaScript 运行时环境。 使用最新的 v16 LTS 版本。|\n| &nbsp; | [微软&nbsp;边缘](https://www.microsoft.com/edge) (建议) 或 [Google Chrome](https://www.google.com/chrome/) | 包含开发人员工具的浏览器。 |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript、TypeScript 或 SharePoint 框架 (SPFx) 生成环境。 使用版本 1.55 或更高版本。 |\n| **可选** | &nbsp; | &nbsp; |\n| &nbsp; | [用于Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack)和 [Azure CLI 的 Azure](/cli/azure/install-azure-cli) 工具 | 用于访问存储数据或在 Azure 中为 Teams 应用部署基于云的后端的 Azure 工具。 |\n| &nbsp; | [React适用于 Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) 或 [React Microsoft&nbsp;Edge 开发人员工具的开发人员工具](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | 开源 React JavaScript 库的浏览器 DevTools 扩展。 |\n| &nbsp; | [Microsoft Graph 浏览器](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph Explorer 是一种基于浏览器的工具，可用于从 Microsoft Graph 数据运行查询。 |\n| &nbsp; | [Teams 开发人员门户](https://dev.teams.microsoft.com/) | 基于 Web 的门户，用于配置、管理和分发 Teams 应用，包括组织或 Teams 应用商店。 |\n\n\n> [!TIP]\n> 如果使用 Microsoft Graph 数据，则应了解 Microsoft Graph 资源管理器并将其书签。 此基于浏览器的工具允许在应用外部查询 Microsoft Graph。\n\n\n## <a name=\"prepare-development-environment\"></a>准备开发环境\n\n安装所需的工具后，请设置开发环境。\n\n\n### <a name=\"install-the-teams-toolkit\"></a>安装 Teams 工具包\n\nTeams 工具包通过工具简化开发过程，这些工具可用于为应用预配和部署云资源、发布到 Teams 应用商店等。 \n \n可以将工具包与调用的Visual Studio Code或 CLI (命令行接口) `TeamsFx`一起使用。\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. 打开Visual Studio Code， (**Ctrl+Shift+X** / ⌘⇧ **-X** 或 **视图>扩展) 中选择“扩展”视图**。\n1. 在搜索框中，输入 **Teams 工具包**。\n1. 选择 Teams 工具包旁边的 **“安装** ”。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png\" alt-text=\"插图显示了 Teams 工具包扩展安装。\":::\n\n Teams 工具包图标在安装后显示在Visual Studio Code边栏中。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"插图显示Visual Studio Code边栏中的 Teams 工具包图标。\":::\n\n还可以在[Visual Studio Code市场](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension)中找到 Teams 工具包。\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n若要安装 TeamsFx CLI，请使用包管理器 `npm` ：\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n根据配置，可能需要使用 `sudo` 它来安装 CLI：\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\n此条件在 Linux 和 macOS 系统上更为常见。\n\n确保将 npm 全局缓存添加到 PATH。 此步骤通常作为Node.js安装程序的一部分完成。  \n\n可以将 CLI 与命令配合 `teamsfx` 使用。 通过运行来验证命令是否正常工作 `teamsfx -h`。\n\n> [!CAUTION]\n> 在 PowerShell 终端中运行 TeamsFx 之前，必须为 PowerShell 启用“远程签名”执行策略。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>设置 Teams 开发租户\n\n**租户** 类似于 Teams 中组织的空间或容器，可在其中聊天、共享文件和运行会议。 此空间也是旁加载和测试应用的位置。 我们来验证是否已准备好使用租户进行开发。\n\n### <a name=\"check-for-sideloading-option\"></a>检查旁加载选项\n\n创建应用后，必须在 Teams 中加载应用，而无需分发它。 此过程称为“旁加载”。 登录到 Microsoft 365 帐户以查看此选项。\n\n > [!NOTE]\n > 在 Teams 本地环境中预览和测试应用需要旁加载。 如果未启用，则无法在本地 Teams 中预览和测试应用。\n\n是否已拥有租户，是否具有管理员访问权限？ 我们来检查你是否真的这样做了！\n\n验证是否可以在 Teams 中旁加载应用：\n\n 1. 在 Teams 客户端中，选择 **“应用商店** ”图标。\n 1. 选择“**管理应用**”。\n 1. 选择“**发布应用**”。\n 1. 查找 **用于上传自定义应用的** 选项。 如果看到此选项，则会启用旁加载应用。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"此图显示了在 Teams 中上传自定义应用的选项。\":::\n\n     > [!NOTE]\n     > 如果没有上传自定义应用的选项，请与 Teams 管理员联系。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>创建免费的 Teams 开发人员租户 (可选) \n\n如果没有 Teams 开发人员帐户，可以免费获取。 加入 Microsoft 365 开发人员计划！\n\n1. 转到 [Microsoft 365 开发人员计划](https://developer.microsoft.com/microsoft-365/dev-program)。\n1. 选择 **“立即加入** ”，并按照屏幕上的说明操作。\n1. 在欢迎屏幕中，选择 **“设置 E5 订阅**”。\n1. 设置管理员帐户。 完成后，将显示以下屏幕。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. 使用刚设置的管理员帐户登录到 Teams。 验证你是否在 Teams 中具有 **“上传自定义应用** ”选项。\n\n## <a name=\"get-a-free-azure-account\"></a>获取免费的 Azure 帐户\n\n如果要在 Azure 中托管应用或访问资源，则必须具有 Azure 订阅。 在开始之前[创建免费帐户](https://azure.microsoft.com/free/)。\n\n现在，你已获得所有工具并设置了帐户。 接下来，让我们设置开发环境并开始构建！ 选择要首先执行的应用。\n"
- title: 为机器人应用创建项目工作区
  durationInMinutes: 1
  content: "\n让我们创建第一个机器人应用。\n\nTeams 应用的机器人功能创建聊天机器人或聊天机器人。 可以使用它来运行简单和自动化的任务，例如提供客户服务。 机器人与 Web 服务交谈，并帮助你使用其产品/服务。 可以获取天气预报、预订或使用会话机器人提供的任何其他服务。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"显示此应用有三个功能的示意图。突出显示了机器人。\":::\n\n由于你已准备好创建这些应用，因此可以设置一个新的 Teams 项目来创建机器人应用。\n\n在本教程中，你将了解：\n\n1. [如何使用 Teams 工具包设置新的机器人项目。](#create-your-bot-project-workspace)\n1. [关于应用项目的目录结构。](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> 目前，机器人在政府社区云 (GCC) 中可用，但在 GCC-High 和国防部 (DOD) 中不可用。\n\n## <a name=\"create-your-bot-project-workspace\"></a>创建机器人项目工作区\n\n如果先决条件已就绪，让我们开始吧！\n\n> [!NOTE]\n> 显示的Visual Studio Code UI 来自 Mac。 它可能因操作系统、Teams 工具包版本和环境而异。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. 打开 Visual Studio Code。\n1. 在 Visual Studio Code 边栏中选择 Teams 工具包 :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: 图标。\n\n1. 选择 **创建新的 Teams 应用**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Teams 工具包边栏中&quot;创建新项目&quot;链接的位置。\":::\n\n1. 选择 **“创建新的 Teams 应用** ”以使用 Teams 工具包创建应用。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"&quot;创建新项目&quot;的向导启动\":::\n\n1. 选择 **“机器人**”，然后选择 **“确定**”。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-capabilities-bot.png\" alt-text=\"显示如何向新应用添加功能的屏幕截图。\":::\n\n1. 在 **“编程语言**”部分中选择 **JavaScript**。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-bot.png\" alt-text=\"显示如何选择编程语言的屏幕截图。\":::\n\n1. 选择所需的 **文件夹，选择工作区文件夹** 。\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/select-folder.png\" alt-text=\"显示如何选择编程语言的屏幕截图。\":::\n\n1. 为应用输入合适的名称，如 `hellobot`。 确保应用的名称为字母数字。 选择“**Enter**”。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/enter-name-bot.png\" alt-text=\"显示在何处输入应用名称的屏幕截图。\":::\n\n    具有机器人功能的 Teams 应用会在几秒钟内创建。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"显示已创建应用的屏幕截图。\":::\n\n    创建应用后，Teams 工具包将显示以下消息：\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/preview-project.png\" alt-text=\"位置消息\":::\n    \n    选择 **“本地调试** ”以预览项目。\n    \n<details>\n<summary>创建 Teams 应用的快速回顾。</summary>\n观看此简短回顾以创建 Teams 应用。\n\n![创建 Teams 应用](~/assets/videos/javascript-bot-app1.gif)\n</details>\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n使用 `teamsfx` CLI 创建你的第一个项目。  从要创建项目文件夹的文件夹开始。\n\n``` bash\nteamsfx new\n```\n\n可以使用 CLI 创建新的 Teams 应用。 CLI 将引导你完成一系列问题。 每个问题都包含有关回答它的说明。\n\n例如，使用箭头键选择一个选项。 做出选择后，选择 **Enter** 以确认它。\n\n1. 选择 **创建新的 Teams 应用**。\n1. 选择 **“机器人** ”和“取消选择 **”选项卡**。\n1. 选择 **JavaScript** 作为编程语言。\n1. 选择 **Enter** 以选择默认工作区文件夹。\n1. 为应用输入合适的名称，如 `HelloBot`。 应用的名称只能包含字母数字字符。\n\n回答所有问题后，将创建项目。\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>浏览机器人应用源代码\n\n基架完成后，查看Visual Studio Code资源管理器区域中的项目目录和文件。\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-folder-structure-bot-new.png\" alt-text=\"hw 新选项卡\":::\n\n| 文件夹名 | 目录 |\n| --- | --- |\n| `.fx/configs` | 用户可以为 Teams 应用自定义的配置文件。 |\n| `.fx/configs/config.<envName>.json` | 每个环境的配置文件。 |\n| `.fx/configs/azure.parameters.<envName>.json` | 适用于每个环境的 Azure BICEP 预配的参数文件。 |\n| `.fx/configs/projectSettings.json` | 适用于所有环境的全局项目设置。 |\n| `.fx/states` | 预配工具包生成的输出。  为应用预配资源后，工具包将创建此文件夹。 |\n| `.fx/states/state.<envName>.json` | 为每个环境预配输出文件。 |\n| `.fx/states/<env>.userdata` | 每个环境的预配输出的敏感用户数据。 |\n| `bot` |  运行时所需的机器人功能代码。 |\n| `bot/teamsBot.js` | 机器人应用的主要入口点。 |\n| `templates/appPackage` | 应用清单模板文件以及应用图标、color.png和outline.png。 |\n| `templates/appPackage/manifest.template.json` | 用于在本地和远程环境中运行应用的应用清单。  |\n| `templates/azure` | BICEP 模板文件 |\n\n> [!Tip]\n> 在将第一个机器人集成到 Teams 中之前，请熟悉 Teams 以外的机器人。\n"
- title: 生成并运行第一个机器人应用
  durationInMinutes: 1
  content: "\n使用 Teams 工具包设置项目工作区后，生成机器人项目。 确保已登录到 Microsoft 365 帐户。\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>登录到 Microsoft 365 帐户\n\n使用此帐户登录到 Teams。 如果使用的是 Microsoft 365 开发人员计划租户，则注册时设置的管理员帐户是 Microsoft 365 帐户。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. 打开 Visual Studio 代码。\n1. 选择边栏中的 Teams 工具包  :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: 图标。\n1. 选择 **登录到 M365**。\n\n    将打开默认 Web 浏览器，以便登录到帐户。\n\n1. 使用凭据登录到 Microsoft 365 帐户。\n1. 出现提示时关闭浏览器并返回到Visual Studio Code。\n1. 返回到Visual Studio Code中的 Teams 工具包。\n\n    使用此帐户登录到 Teams。 如果使用的是 Microsoft 365 开发人员计划租户，则注册时设置的管理员帐户是 Microsoft 365 帐户。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"显示登录到 Microsoft 365 和 Azure 的位置的屏幕截图。\":::\n\n    现在，你已准备好生成应用并在本地运行它！\n\n# <a name=\"command-line\"></a>[命令行](#tab/cline)\n\n1. 使用 TeamsFx CLI 登录到 Microsoft 365：\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    将打开默认 Web 浏览器，以便登录到帐户。 使用凭据登录到 Azure 帐户。 提示时关闭浏览器。\n\n2. 使用 TeamsFx CLI 登录到 Azure：\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    将打开默认 Web 浏览器，以便登录到帐户。 使用凭据登录到 Azure 帐户。 提示时关闭浏览器。\n\n    帐户登录名在 Visual Studio Code 和 TeamsFx CLI 之间共享。\n\n    配置开发环境后，可以创建、生成和部署第一个 Teams 应用。\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>在本地生成并运行第一个机器人应用\n\n若要在本地环境中生成和运行应用，请执行以下操作：\n\n1. 在Visual Studio Code中选择 **F5** 以在调试模式下运行应用。\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>在本地调试器中运行应用时，了解会发生什么情况。</summary>\n\n    如果你想知道，当你按 **F5** 键时，Teams 工具包：\n\n    1. 检查以下所有先决条件：\n      - 你已使用 Microsoft 365 帐户登录。\n      - 已为 Microsoft 365 帐户启用旁加载。\n      - 已安装受支持的Node.js版本。\n      - 安装了机器人应用的 NPM 包。\n      - 已安装 Ngrok。\n      - 机器人应用所需的端口可用。\n\n      > [!NOTE]\n      > 如果 Teams 工具包无法检查特定的先决条件，它会提示你检查它。\n\n    2. 启动 Ngrok 以创建 HTTP 隧道。\n    3. 在 Azure AD 中注册应用并配置应用。\n    4. 在 Bot Framework 中注册机器人应用并配置机器人应用。\n    5. 在 Teams 开发人员门户中注册应用并配置应用。\n    6. 启动机器人应用。\n    7. 在 Web 浏览器中启动 Teams 并旁加载机器人应用。\n\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"显示按下 F5 键进行调试时的屏幕截图。\":::\n\n    > [!NOTE]\n    > 首次运行应用时，将下载所有依赖项，并生成应用。 编译完成后，将自动打开浏览器窗口。 此过程可能需要 3-5 分钟才能完成。\n\n    Teams 在 Web 浏览器中运行应用。\n\n1. 如果出现提示，请使用 Microsoft 365 帐户登录。\n\n1. 当系统提示将应用旁加载到本地计算机上的 Teams 时选择 **“添加** ”。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"显示正在 Teams 客户端上添加机器人的屏幕截图。\":::\n\n    现在机器人已在 Teams 上成功运行！ 加载应用后，将打开与机器人的聊天会话。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"显示机器人在 Teams 客户端上运行的屏幕截图。\":::\n\n    可以键入 `welcome` 以显示简介卡片，然后键 `learn` 入以转到自适应卡片和机器人命令文档。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"显示 Teams 客户端上的机器人中的学习卡片的屏幕截图。\":::       \n\n    可以像使用任何其他 Web 应用程序一样，执行正常的调试活动，例如设置断点。 打开 `bot/teamsBot.js` 文件并找到 `onMessage()` 方法。 在任何情况下设置断点。 然后键入一些文本。\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>了解如何在应用未在本地运行时进行故障排除。</summary>\n\n  若要在 Teams 中成功运行应用，请确保已在 Teams 帐户中启用旁加载。 可以在“先决条件”部分了解有关旁加载的详细信息。\n\n  > [!IMPORTANT]\n  > 目前，政府社区云 (GCC) 、GCC-High 和 DOD 中提供了旁加载应用。\n\n  > [!TIP]\n  > 使用 [应用验证工具](https://dev.teams.microsoft.com/appvalidation.html)旁加载应用之前，请检查是否有问题。 此工具包含在工具包中。 修复了旁加载应用的错误。\n  </details> \n"
- title: 部署第一个 Teams 应用
  durationInMinutes: 1
  content: "\n你已了解如何使用机器人功能创建、生成和运行 Teams 应用。 最后一步是在 Azure 上部署应用。\n\n让我们使用 Teams 工具包在 Azure 上部署具有机器人功能的第一个应用。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>登录到 Azure 帐户\n\n使用此帐户访问 Microsoft Azure 门户，并预配新的云资源以支持应用。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. 打开 Visual Studio 代码。\n1. 打开在其中创建选项卡应用的项目文件夹。\n1. 选择边栏中的 Teams 工具包  :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: 图标。\n1. 选择 **“登录到 Azure**”。\n\n    > [!TIP]\n    > 如果已安装 Azure 帐户扩展并使用同一帐户，则可以跳过此步骤。 使用在其他扩展中使用的同一帐户。\n\n    将打开默认 Web 浏览器，以便登录到帐户。\n1. 使用凭据登录到 Azure 帐户。\n1. 出现提示时关闭浏览器并返回到Visual Studio Code。\n\n    边栏的 **ACCOUNTS** 部分分别显示这两个帐户。 它还列出了可用 Azure 订阅的数量。 确保至少有一个可用的 Azure 订阅可用。 如果没有，请注销并使用其他帐户。\n\n    现在已准备好将应用部署到 Azure！\n\n    恭喜，你已创建 Teams 应用！ \n    现在，让我们继续了解如何使用 Teams 工具包将其中一个应用部署到 Azure。\n\n# <a name=\"command-line\"></a>[命令行](#tab/cline)\n\n1. 使用 TeamsFx CLI 登录到 Microsoft 365：\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    将打开默认 Web 浏览器，以便登录到帐户。 使用凭据登录到 Azure 帐户。 提示时关闭浏览器。\n\n2. 使用 TeamsFx CLI 登录到 Azure：\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    将打开默认 Web 浏览器，以便登录到帐户。 使用凭据登录到 Azure 帐户。 提示时关闭浏览器。\n\n    帐户登录名在 Visual Studio Code 和 TeamsFx CLI 之间共享。\n\n    恭喜，你已创建 Teams 应用！ \n    现在，让我们继续了解如何使用 Teams 工具包将其中一个应用部署到 Azure。\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>了解将应用部署到 Azure 时会发生的情况</summary>\n\n  部署之前，应用程序已在本地运行:\n\n  * 后端使用 **Azure Functions Core Tools** 运行。\n  * 应用程序 HTTP 终结点 (Microsoft Teams 在此加载应用程序) 在本地运行。\n\n  部署是一个双重过程。 在活动 Azure 订阅上预配资源，然后将应用程序的后端和前端代码部署或上传到 Azure。\n\n  * 后端（如果已配置）使用各种 Azure 服务，包括 Azure 应用服务 和 Azure 存储。\n  * 将前端应用程序部署到配置用于静态 Web 托管的 Azure 存储帐户。\n\n  </details>\n"
- title: 恭喜！
  durationInMinutes: 1
  content: "\n你做到了！\n\n你已创建机器人应用。\n\n现在，你已了解如何创建基本应用，接下来可以继续创建更复杂的应用。 首先，请尝试将功能添加到现有应用。\n\n若要将功能添加到现有应用，请执行以下操作：\n\n1. 从 Teams 工具包边栏的 **“开发**”部分中选择 **“添加功能**”。\n\n1. 选择要添加到应用的功能。\n\n就是这么简单。 Teams 工具包将新功能的基架添加到应用的目录结构。 按照过程生成和部署应用，应用将具有多个功能。 \n\n你已完成使用 JavaScript 生成机器人的教程。"
