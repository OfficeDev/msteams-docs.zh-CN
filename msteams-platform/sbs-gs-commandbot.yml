### YamlMime:Tutorial
title: 使用 JavaScript 生成命令机器人
metadata:
  title: 使用 JavaScript 生成命令机器人
  description: 本教程介绍如何使用 JavaScript 创建命令机器人。
  audience: Developer
  level: Beginner
  ms.date: 05/05/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/add-capability.md
  nextTutorialTitle: 返回到添加功能
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: cc0d53d8aaa98fc912431e738084d5439526f115
  ms.sourcegitcommit: eeaa8cbb10b9dfa97e9c8e169e9940ddfe683a7b
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 05/27/2022
  ms.locfileid: "65757232"
items:
- durationInMinutes: 1
  content: "Microsoft Teams允许使用命令机器人自动执行重复性任务。 它响应使用自适应卡片在聊天中发送的简单命令。 \n\n在本教程中，你将了解：\n\n- 如何使用Teams Toolkit生成命令机器人\n- 关于应用的目录结构\n\n本分步指南可帮助你使用Teams Toolkit生成命令机器人。 你将看到以下输出：\n\n  :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/final-output.png\" alt-text=\"final-output\" border=\"true\":::\n"
- title: 先决条件
  durationInMinutes: 1
  content: "\n下面是生成和部署应用所需的工具列表。\n\n| &nbsp; | 安装 | 用于使用 |\n| --- | --- | --- |\n| **Required** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams 工具包](#install-the-teams-toolkit) | 为应用创建项目基架的Microsoft Visual Studio代码扩展。 使用版本 4.0.0。  |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams通过聊天、会议、通话等应用与所有用户协作。|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | 后端 JavaScript 运行时环境。 使用版本 14 或 16。|\n| &nbsp; | [微软&nbsp;边缘](https://www.microsoft.com/edge) (建议) 或 [Google Chrome](https://www.google.com/chrome/) | 包含开发人员工具的浏览器。 |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript 或 TypeScript，生成环境。 使用最新版本。 |\n| &nbsp; | [Microsoft 365开发人员帐户](https://docs.microsoft.com/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | 使用安装应用的适当权限访问Teams帐户。 |\n\n> [!NOTE]\n> 本指南在 Teams Toolkit 版本 4.0.0 和 Nodejs 版本 14 和 16 上进行测试。 本指南中的步骤可能适用于其他版本，但尚未进行测试。\n\n## <a name=\"prepare-development-environment\"></a>准备开发环境\n\n安装所需的工具后，请设置开发环境。\n\n\n### <a name=\"install-the-teams-toolkit\"></a>安装Teams Toolkit\n\nTeams Toolkit可通过工具简化开发过程，以便为应用预配和部署云资源、发布到Teams存储等。 \n \n可以将工具包与调用的Visual Studio Code或 CLI (命令行接口) 配合使用`TeamsFx`。\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. 打开Visual Studio Code **， (** **Ctrl+Shift+X** / ⌘⇧ **-X** 或 **查看>扩展)**。\n1. 在搜索框中，输入 **Teams Toolkit**。\n1. 选择 **“安装**”旁边的Teams Toolkit。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/teams-toolkit.png\" alt-text=\"此图显示了Teams Toolkit扩展安装。\" border=\"false\":::\n\n 安装后，Teams Toolkit图标将显示在Visual Studio Code边栏中。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"插图显示Visual Studio Code边栏中的Teams Toolkit图标。\" border=\"false\":::\n\n还可以在Visual Studio Code市场中找到[Teams Toolkit](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension)。\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n若要安装 TeamsFx CLI，请使用包管理器 `npm` ：\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n根据配置，可能需要使用 `sudo` 它来安装 CLI：\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\n它在 Linux 和macOS系统上更为常见。\n\n确保将npm全局缓存添加到 PATH。 此步骤通常作为Node.js安装程序的一部分完成。  \n\n可以将 CLI 与命令配合 `teamsfx` 使用。 通过运行来验证命令是否正常工作 `teamsfx -h`。\n\n> [!NOTE]\n> 在 PowerShell 终端中运行 TeamsFx 之前，请确保为 PowerShell 启用 **远程签名** 执行策略。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>设置Teams开发租户\n\n**租户** 类似于一个空间或容器，你在其中聊天、共享文件，并在Teams中为组织运行会议。 还可以旁加载和测试应用。\n\n### <a name=\"check-for-sideloading-option\"></a>检查旁加载选项\n\n创建应用后，必须在 Teams 中加载应用，而无需分发它。 这称为旁加载。 登录到Microsoft 365帐户以查看此选项。\n\n > [!NOTE]\n > 在本地环境中预览和测试 Teams应用需要旁加载。 启用旁加载以在本地Teams预览和测试应用。\n\n是否已拥有租户，是否具有管理员访问权限？ 我们来检查你是否真的这样做了！\n\n若要验证Teams中的旁加载应用：\n\n 1. 在Teams客户端中，选择 **Microsoft Store**。\n 1. 选择“**管理应用**”。\n 1. 选择“**发布应用**”。\n 1. 查找 **用于Upload自定义应用的** 选项。 如果看到此选项，则会启用旁加载应用。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"插图显示了在Teams中上传自定义应用的选项。\":::\n\n     > [!NOTE]\n     > 如果没有上传自定义应用的选项，请与Teams管理员联系。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>创建免费Teams开发人员租户 (可选) \n\n如果没有Teams开发人员帐户，则可以免费获取。 加入Microsoft 365开发人员计划！\n\n1. 转到 [Microsoft 365 开发人员计划](https://developer.microsoft.com/microsoft-365/dev-program)。\n1. 选择 **“立即加入** ”，并按照屏幕上的说明操作。\n1. 从欢迎屏幕中选择 **“设置 E5 订阅** ”。\n1. 设置管理员帐户。 完成后，将显示以下屏幕。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\" border=\"true\":::\n\n1. 使用新的管理员帐户登录到Teams。 现在应具有 **Upload自定义应用** 选项。\n"
- title: 生成命令机器人
  durationInMinutes: 1
  content: "**使用Visual Studio Code生成命令机器人**\n\n 1. 打开 Visual Studio Code。\n\n 1. 在 Visual Studio Code 边栏中选择 Teams 工具包 :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: 图标。\n\n 1. 选择 **创建新的 Teams 应用**。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/create-new-teams-app.png\" alt-text=\"Teams 工具包边栏中&quot;创建新项目&quot;链接的位置。\" border=\"true\":::\n\n 1. 选择 **“创建新的Teams应用**”选项以使用Teams Toolkit创建应用。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/create-new-app.png\" alt-text=\"向导开始创建新项目\" border=\"true\":::\n\n 1. 确保 **将命令机器人** 选为要在应用中生成的功能。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-bot.png\" alt-text=\"选择应用功能\" border=\"true\":::\n\n 1. 选择 **HTTP 触发器 Restify Server** 作为触发器。\n 1. 选择“**确定**”。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-trigger.png\" alt-text=\"选择触发器\" border=\"true\":::\n\n 1. 选择 **JavaScript** 作为编程语言。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-script.png\" alt-text=\"显示如何选择编程语言的屏幕截图。\" border=\"true\":::\n \n 1. 选择项目工作区的位置。\n 1. 选择 **“选择文件夹**”。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-folder.png\" alt-text=\"选择“文件夹”。\" border=\"true\":::\n \n 1. 为应用输入合适的名称，例如命令机器人作为应用程序名称。 \n 1. 选择“**Enter**”。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/app-name.png\" alt-text=\"应用程序名称。\" border=\"true\":::\n\n     > [!NOTE]\n     > 确保仅在应用程序名称中使用字母数字字符。\n\n     命令机器人应用在几秒钟内创建。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/command-bot.png\" alt-text=\"显示已创建应用的屏幕截图。\" border=\"true\":::\n\n 1. 从Visual Studio Code边栏中选择 **“运行和调试**:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\":::”图标。\n\n 1. 从下拉列表 **中选择“调试 (Edge)** ”或“ **调试” (Chrome)** 。\n\n 1. 选择 **\"开始\"菜单调试** 按钮。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/debug-app.png\" alt-text=\"调试应用程序\" border=\"true\":::\n\n 1. 选择“**添加**”。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/add-app.png\" alt-text=\"添加应用\" border=\"true\":::     \n\n 1. 选择命令机器人。\n \n 1. 选择“**Enter**”。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/hello-world-command.png\" alt-text=\"添加应用下拉列表\" border=\"true\":::  \n\n    你将在自适应卡片中收到以下命令响应：\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/final-output.png\" alt-text=\"final-output\" border=\"true\":::      \n\n ## <a name=\"take-tour-of-source-code\"></a>浏览源代码\n\n Teams Toolkit提供用于生成应用的组件。 创建项目后，可以在Visual Studio Code的 **资源管理器** 区域中查看项目文件夹和文件。\n\n   :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/folder-structure.png\" alt-text=\"结构选项卡\" border=\"true\":::\n\n 如果选择使用 UI 框架，请按照示例模板代码提供包含React组件的基架。 它包含以下内容：\n\n | 文件名 | 目录 |\n | --- | --- |\n | `bot/src/internal/initialize.js` | 创建全局机器人适配器并使用Teams框架进行初始化 |\n | `bot/src/index.js` | 用于托管机器人应用并侦听 /api/messages 以使用 Bot Framework 处理Teams活动的服务器代码 |\n | `bot/src/helloworldCommandHandler.js` | 用于处理 helloworld 命令并返回自适应卡作为响应的 hello world 命令处理程序 |\n | `bot/src/adaptiveCards/*.json` | 用作命令响应的自适应卡片 JSON 文件 |\n"
- title: 部署第一个Teams应用
  durationInMinutes: 1
  content: "\n你已学会使用命令机器人功能生成和运行Teams应用。 最后一步是在 Azure 上部署应用。\n\n让我们使用Teams Toolkit在 Azure 上部署具有命令机器人功能的第一个应用。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>登录到 Azure 帐户\n\n使用帐户访问Microsoft Azure门户，并提供新的云资源以支持应用。\n\n1. 打开 Visual Studio Code。\n1. 打开创建命令机器人应用的项目文件夹。\n1. 选择边栏中的Teams Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\":::图标。  \n1. 选择 **登录到 Azure**。\n\n    > [!TIP]\n    > 如果已安装 Azure 帐户扩展并使用同一帐户，则可以跳过此步骤。\n\n    将打开默认 Web 浏览器，以便登录到帐户。\n1. 使用凭据登录到 Azure 帐户。\n1. 出现提示时关闭浏览器并返回到Visual Studio Code。\n\n    边栏的 **ACCOUNTS** 部分分别显示这两个帐户。 它还列出了可用 Azure 订阅的数量。\n    \n    > [!NOTE]\n    > 确保至少有一个可用的 Azure 订阅可用。\n\n    现在已准备好将应用部署到 Azure！\n\n## <a name=\"deploy-your-app-to-azure\"></a>将应用部署到 Azure。\n\n 在 **部署** 下，可以预配必要的云资源，并将应用的代码复制到创建的云资源中。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. 在 Visual Studio Code 边栏中选择 Teams 工具包 :::image type=\"icon\" source=\"~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: 图标。\n\n1. 在 **部署** 下 **选择“在云中预配**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/provision-cloud.png\" alt-text=\"显示预配命令的屏幕截图\" border=\"true\":::\n\n1. 选择现有资源组或创建新的资源组。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/subscription-cloud.png\" alt-text=\"显示用于预配的资源的屏幕截图\" border=\"true\":::\n\n    > [!NOTE]\n    > 此时会显示一个对话框，其中提到在 Azure 中运行资源时可能会产生成本。\n\n1. 选择 **“预配**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/provision-confirm.png\" alt-text=\"预配对话框的屏幕截图。\" border=\"true\":::\n\n   预配过程在 Azure 云中创建资源。 可以通过观察右下角的对话来监视进度。 几分钟后，你会看到以下通知：\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/deploy-provision-success.png\" alt-text=\"显示预配完成对话框的屏幕截图。\" border=\"true\":::\n\n     可以选择查看预配的资源。 在本教程中，无需查看资源。\n\n1. 预配完成后，在 **“部署**”下选择 **“部署到云**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/deploy-cloud.png\" alt-text=\"显示要单击到云的部署位置的屏幕截图。\" border=\"true\":::\n\n1. 选择“部署”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/Deploy-confirm.png\" alt-text=\"部署以确认。\" border=\"true\":::\n\n   部署需要一些时间。 可以在右下角监视对话框中的进度。 几分钟后，你会看到以下通知。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/command-deploy-confirm.png\" alt-text=\"部署确认。\" border=\"true\":::\n\n\n1. 打开调试面板 (**Ctrl+Shift+D** / ⌘⇧ **-D** 或 **视图>** 从Visual Studio Code运行) 。\n1. 从启动配置下拉列表中选择 **“启动远程 (Edge)** ”。\n1. 选择 **\"开始\"菜单调试** 按钮。\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/remote-debug.png\" alt-text=\"远程调试。\" border=\"true\":::\n\n1. 选择“**添加**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/app-cloud-output.png\" alt-text=\"应用云输出。\" border=\"true\":::\n\n1. 选择命令机器人。\n1. 选择“**Enter**”。  \n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/hello-world-cloud.png\" alt-text=\"Hello World命令\" border=\"true\":::\n\n    你将在自适应卡片中收到以下命令响应：\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/cloud-final-output.png\" alt-text=\"云最终输出\" border=\"true\":::\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n在终端窗口中：\n\n1. 运行 `teamsfx new` 以创建新项目。\n\n   ``` bash\n   teamsfx new\n   ```\n\n1. 运行 `teamsfx provision` 以创建 azure 资源。\n\n   ``` bash\n   teamsfx provision\n   ```\n\n1. 运行 `teamsfx deploy` 以部署应用。\n\n   ``` bash\n   teamsfx deploy\n   ```\n\n1. 运行 `teamsfx preview` 以运行应用。\n\n   ``` bash\n   teamsfx preview\n   ```\n\n---\n"
- title: 完成质询
  durationInMinutes: 1
  content: >
    你想出了这样的事吗？


    :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="云最终输出" border="true":::
- content: 你已完成生成命令响应应用的教程。
