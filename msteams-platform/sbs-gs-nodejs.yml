### YamlMime:Tutorial
title: 使用 Node.js 生成第一个应用
metadata:
  title: Hello World with Node.js
  description: 本教程介绍如何使用应用生成 Hello World Node.js。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: 返回到入门概述
  ms.custom: mvc
  ms.localizationpriority: high
items:
  - durationInMinutes: 1
    content: |
      通过Microsoft Teams选项卡、机器人和消息扩展功能构建你的第一个应用，开始开发应用。

      >此应用将具有所有功能，并且每个功能都有其自己的 UI 和 UX：

      :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png" alt-text="显示此应用程序的图表具有三个功能。" border="false":::

      在本教程中，你将了解：

      - 如何使用命令行工具设置新项目。
      - 如何构建三个应用，每个应用具有不同的功能：选项卡、机器人和消息扩展。
      - 如何从开发人员门户部署应用
  - title: 必备条件
    durationInMinutes: 1
    content: |

      下面是生成和部署应用所需的工具Teams列表。

      | &nbsp; | 安装 | 对于使用... |
      | --- | --- | --- |
      | **Required** | &nbsp; | &nbsp; |
      | &nbsp; | [Node.js 和 NPM](https://nodejs.org/) | 后端 JavaScript 运行时环境。 使用最新的 v14 LTS 版本。|
      | &nbsp; | [ngrok](https://ngrok.com/download) | Teams应用功能 (对话机器人、消息传递扩展和传入 webhook) 需要入站连接。 隧道将开发系统连接到Teams。 仅包含选项卡的应用不需要它。 此包安装在项目目录中， (npm `devDependencies`) 。 |
      | &nbsp; | [Microsoft Edge (](https://www.microsoft.com/edge)推荐) [Google Chrome](https://www.google.com/chrome/) | 具有开发人员工具的浏览器。 |
      | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript、TypeScript 或 SharePoint 框架 (SPFx) 生成环境。 使用版本 1.55 或更高版本。 |
      | &nbsp; | [Git](https://git-scm.com/downloads) | Git 使用来自 Node.js 的示例应用程序GitHub。 |
      | &nbsp; |  [gulp](https://gulpjs.com/docs/en/getting-started/quick-start) | 开放源代码 JavaScript 工具包。 安装版本 4.0.0 或更高版本。 |
      | &nbsp; | [Microsoft Teams](https://www.microsoft.com/en-us/microsoft-teams/download-app) | Microsoft Teams通过聊天、会议、呼叫等应用与合作的所有人员进行协作- 全部在一个地方进行。 | 
      | **可选** | &nbsp; | &nbsp; |
      | &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) and [Azure CLI](/cli/azure/install-azure-cli) | Azure 工具，用于访问已存储数据或在 Azure 中为 Teams应用部署基于云的后端。 |
      | &nbsp; | [React Chrome 开发人员工具](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)或[React开发人员工具 for Microsoft Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | 用于使用 JavaScript 开发选项卡的浏览器工具。 |
      | &nbsp; | [Microsoft Graph 浏览器](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph资源管理器，一种基于浏览器的工具，允许你从 Microsoft 运行查询Graph数据。 |
      | &nbsp; | [Teams 开发人员门户](https://dev.teams.microsoft.com/) | 基于 Web 的门户，用于配置、管理和分发 Teams 应用，包括组织或 Teams 应用商店。 |
      | &nbsp; | **Visual Studio Code 扩展** | &nbsp; |
      | &nbsp; | [Azure 函数核心工具](/azure/azure-functions/functions-run-local) | 在本地调试运行期间本地后端组件，包括在 Azure 中运行服务时所需的身份验证帮助程序。 它使用 npm `devDependencies` (安装在项目目录) 。 |
      | &nbsp; | [.NET SDK](/dotnet/core/install/) | 用于本地调试和 Azure Functions 应用部署的自定义绑定。 如果尚未全局安装 .NET 3.1 (或更高版本) SDK，可以安装可移植版本。 |

      ## <a name="verify-version-numbers-for-installed-tools"></a>验证已安装工具的版本号

      使用以下命令验证工具的已安装版本是否根据需要。

      > [!NOTE]
      > 使用你最熟悉平台的终端窗口。 这些示例使用 Git Bash (包含在 Git 安装) ，但这些脚本将在大多数平台上运行。

      验证已安装工具的版本号：

      1. 打开终端窗口。 
      2. 运行以下命令以验证 `git` 计算机上安装的版本：

          ```bash
          $ git --version
          ```

          输出示例： `git version 2.19.0.windows.1`
          
      3. 运行以下命令来验证 `node.js` 版本：
          
          ```bash
          $ node -v
          ```

          输出示例： `v8.9.3`

      4. 验证 的版本号 `npm`：

          ```bash
          $ npm -v
          ```

          输出示例： `5.5.1`

      5. 验证 的版本号 `gulp`：
          
          ```bash
          $ gulp -v
          ```

          输出示例：  `CLI version 2.3.0`
          
          `Local version 4.0.2`

      6. 运行以下命令以验证Visual Studio Code：

          ```bash
          code --version
          ```

          输出示例：  `1.28.2`
          
          `929bacba01ef658b873545e26034d1a8067445e9`

      可以没有任何问题地使用这些应用程序的不同版本。


      ## <a name="set-up-your-teams-development-tenant"></a>设置开发Teams租户

      **租户就像** 租户中的空间或组织的容器，Teams聊天、共享文件和运行会议。
      此空间也是你旁加载和测试应用的地方。 

      让我们验证你是否已准备好使用租户进行开发。

      ### <a name="enable-sideloading-option"></a>启用旁加载选项

      创建应用后，必须在不分配应用的情况下Teams加载应用。 此过程称为旁加载。 登录到你的 Microsoft 365 帐户以查看此选项。
        
      你已拥有租户，是否具有管理员访问权限？ 让我们看一下你是否确实要这样做！

      验证你能否在应用中旁加载Teams：

      1. 在"Teams"客户端中，选择 **"应用商店图标**"。
      1. 选择 **"管理应用"**。
      1. 查找用于自定义 **Upload的选项**。 如果看到 选项，则启用旁加载应用。

          :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text="插图显示用于上传自定义应用的选项Teams。":::

          > [!NOTE]
          > 如果Teams显示上传自定义应用的选项，请与管理员Teams联系。

      ### <a name="create-a-free-teams-developer-tenant"></a>创建免费开发人员Teams租户

      如果你没有开发者帐户Teams，可以免费获取它。 加入 Microsoft 365开发人员计划！

      1. 转到开发人员[Microsoft 365计划](https://developer.microsoft.com/microsoft-365/dev-program)。
      1. 选择 **立即加入** 并按照屏幕上的说明进行操作。
      1. 在欢迎屏幕中，选择 **"设置 E5 订阅"**。
      1. 设置管理员帐户。 完成后，将显示以下屏幕。

          :::image type="content" source="~/assets/images/build-your-first-app/dev-program-subscription.png" alt-text="注册开发人员计划后看到Microsoft 365的示例。":::

      1. 使用刚Teams的管理员帐户登录登录。 验证你已Upload **自定义应用** 选项Teams。

      ## <a name="get-a-free-azure-account"></a>获取免费的 Azure 帐户

      如果你想要在 Azure 中托管应用或访问资源，则必须拥有 Azure 订阅。 [在开始之前创建](https://azure.microsoft.com/free/) 一个免费帐户。

      现在，你已获得所有工具并设置帐户。 接下来，让我们设置开发环境并开始构建！

      你可以继续使用此终端窗口运行本教程中遵循的命令。

      <a name="DownloadSample"></a>

      ## <a name="download-the-sample"></a>下载示例

      对于本教程，请使用 [Hello， World！](https://github.com/OfficeDev/Microsoft-Teams-Samples/tree/main/samples/app-hello-world/nodejs) 示例开始。 可以从文件下载并GitHub。

      **若要使用 Git Bash 克隆示例存储库**：

      1. 打开终端窗口。
      1. 运行以下命令，将示例存储库克隆到您的计算机：

          ```bash
          git clone https://github.com/OfficeDev/Microsoft-Teams-Samples.git
          ```

      > [!TIP]
      > 如果要[修改和](https://help.github.com/articles/fork-a-repo/)[签入对](https://github.com/OfficeDev/Microsoft-Teams-Samples)存储库所做的更改，可以分叉此存储库GitHub供将来参考。
  - title: 生成首个Node.js应用
    durationInMinutes: 1
    content: |

      克隆示例应用Node.js存储库后，可以在本地环境中生成和测试应用。

      在此页中，你将了解：
      1. [生成并运行你的第一个应用](#build-and-run-the-sample)
      1. [测试示例应用](#test-your-sample-app-in-local-environment)


      ## <a name="build-and-run-the-sample"></a>生成和运行示例

      克隆存储库后，可以生成示例应用。

      1. 打开终端窗口。
      1. 在终端中运行更改目录命令以更改为示例应用目录：

          ```bash
          cd Microsoft-Teams-Samples/samples/app-hello-world/nodejs/
          ```

      1. 使用下列命令安装所有依赖项：

          ```bash
          npm install
          ```

          你应该会看到一组依赖项正在安装。

      1. 安装完成后，使用下面的命令运行应用：

          ```bash
          npm start
          ```

          当 Hello World 应用启动时，它显示在 `App started listening on port 3333` 终端窗口中。

          > [!NOTE]
          > 如果看到上述消息中显示的端口号不同，这是因为您设置了 PORT 环境变量。 您可以继续使用该端口，也可以将环境变量更改为 3333。

      1. 打开浏览器窗口，然后使用以下 URL 验证所有 Hello World 应用 URL 是否正在加载：

          - `http://localhost:3333`

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/local-host.png" alt-text="显示本地Node.js的图像" border="false":::

          - `http://localhost:3333/hello`

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/local-host-hello-nodejs.png" alt-text="显示本地主机Node.js页的图像" border="false":::

          - `http://localhost:3333/first`

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/local-host-first-nodejs.png" alt-text="显示本地主机Node.js选项卡的图像" border="false":::

          - `http://localhost:3333/second`

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/local-host-second-nodejs.png" alt-text="显示本地Node.js第二个选项卡的图像" border="false":::

      ## <a name="test-your-sample-app-in-local-environment"></a>在本地环境中测试示例应用

      请记住，Microsoft Teams应用程序是公开一个或多个功能的 Web 应用程序。 使你的应用在 Internet 上可用，以便Teams加载它。 若要使你的应用从 Internet 上访问，你需要 *托管* 你的应用。

      对于本地测试，可以在本地计算机上运行应用，然后使用 Web 终结点创建一个隧道。 [ngrok](https://ngrok.com) 是一款免费工具，允许你这样做。 使用 *ngrok*，你可以获取 Web `https://d0ac14a5.ngrok.io` 地址， (此 URL 只是一个) 。 你可以 [为环境下载](https://ngrok.com/download)*并安装 ngrok*。 请确保将其添加到 中的位置 `PATH`。

      ### <a name="create-ngrok-tunnel"></a>创建 ngrok 隧道

      安装 ngrok 后，可以创建一个隧道以在本地部署应用。

      1. 打开一个新的终端窗口。
      1. 运行以下命令以创建隧道。 示例应用使用端口 3333：

          ```bash
          ngrok http 3333 -host-header=localhost:3333
          ```
          将创建 ngrok 隧道。 下面是 ngrok 隧道的示例。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nodejs-ngrok-tunnel.png" alt-text="显示 ngrok 隧道的图像" border="false":::

          *Ngrok* 侦听来自 Internet 的请求，并将它们路由到在端口 3333 上运行的应用。

      验证应用的本地部署：

      1. 打开浏览器。
      1. 使用下面的 URL 加载应用：

          `https://<forwarding address in ngrok console session>/`

          下面是 URL 的示例：

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nodejs-ngrok-tunnel-verify.png" alt-text="显示node.js ngrok 隧道本地运行的应用的图像" border="false":::

          你可以尝试将 、 `hello``first`或 `second` 添加到 ngrok 隧道 URL 以查看应用的不同选项卡页。

          Ngrok 侦听来自 Internet 的请求，将它们路由到在端口 3333 上运行的应用。        

      1. 记下 ngrok 控制台中的转发地址。 你需要此 URL 以在 Teams 中部署应用。

          > [!NOTE]
          > 如果你在生成和运行期间 [使用了其他端口](#build-and-run-the-sample)，请确保使用相同的端口号来设置 *ngrok* 隧道。
          > [!TIP]
          > 建议在不同的终端窗口中运行 *ngrok* 以保持其运行，而不会影响节点应用，稍后可能需要停止、重新生成和重新运行节点应用。 *ngrok* 会话将在此窗口中返回有用的调试信息。 *ngrok 的付费版本* 允许永久名称。

          >[!IMPORTANT] 
          > 如果你使用 ngrok 的免费版本，你的应用将仅在开发计算机上当前会话期间可用。 如果计算机关闭或进入睡眠状态，则不可用。 重新启动该服务时，它将返回一个新地址。 然后，您必须更新使用过时地址的每一个位置。 在共享应用进行测试时，请记住此步骤。

      <a name="DeployToTeams"></a>

      ## <a name="build-nodejs-app-package"></a>生成Node.js应用包

      可以使用 为 `gulp CLI` 应用生成应用包Node.js。

      1. 打开终端窗口。
      1. 确保您位于克隆 的 `node.js` 目录中。 这是放置的文件夹 `gulpfile.js` 。 
      1. 运行以下命令以生成Node.js包。

          ```$ gulp```

          下面是命令输出的示例：

          `[13:39:27] Using gulpfile ~\documents\github\msteams-samples-hello-world-nodejs\gulpfile.js`

          `[13:39:27] Starting 'clean'...`

          `[13:39:27] Starting generate-manifest'...`

          `[13:39:27] Finished 'generate-manifest' after 11 ms`

          `[13:39:27] Finished 'clean after 21 ms`

          `[13:39:27] Starting 'default'...
          Build completed. Output in manifest folder`

          `[13:39:27] Finished 'default' after 62 μs`

          创建应用helloworldapp.zip包。 可以在以下路径找到程序包文件。

          `<path to the cloned repo>/Microsoft-Teams-Samples/samples/app-hello-world/nodejs/manifest`

          > [!NOTE]
          > 搜索应用包文件，helloworldapp.zip（如果正在使用的工具中的位置不明确）。
  - title: 使用开发人员门户Node.js你的第一个应用
    durationInMinutes: 1
    content: |

      可以使用开发人员[门户](https://dev.teams.microsoft.com/)将应用包上载到Teams配置应用功能。 开发人员门户是Teams应用程序，可简化应用程序的创建和注册。 从应用商店Teams安装！

      生成并测试你的 Teams 应用后，可以使用开发人员门户对其进行配置和预览。

      更新应用包包括：

      1. [将应用包导入开发人员门户](#import-the-app-package-to-developer-portal)
      1. [配置应用功能](#configure-your-apps-capabilities)

      ### <a name="import-the-app-package-to-developer-portal"></a>将应用包导入开发人员门户

      若要导入应用包：

      1. 打开 Microsoft Teams。

      1. 从 **左侧栏中**:::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-store-icon.png":::选择"应用商店"图标。

      1. 在搜索 **栏中搜索** 开发人员门户，然后选择**开发人员门户***。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/select-dev-portal-app.png" alt-text="选择开发人员门户应用" border="false":::

      1. 选择 **“打开”**。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/open-dev-portal.png" alt-text="显示打开的开发人员门户应用的图像" border="false":::

          开发人员门户将打开。

      1. 选择" **应用"** 选项卡。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/dev-portal-app.png" alt-text="开发人员门户应用" border="false":::

      1. 选择 **"导入应用"**。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/import-app-in-dev-portal.png" alt-text="显示&quot;导入应用&quot;按钮的图像" border="false":::

      1. 打开应用程序包 **helloworldapp.zip** 示例存储库C#中的以下路径：

          `<path to cloned node.js sample repo>\Source\Repos\Microsoft-Teams-Samples\samples\app-hello-world\nodejs\manifest`

          Hello **World** 应用在开发人员门户中导入。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/app-imported-dev-portal.png" alt-text="显示已导入应用程序Teams" border="false":::

          将应用导入开发人员门户后，可以在开发人员门户中查看其详细信息。

      ### <a name="take-a-tour-of-your-app-in-developer-portal"></a>在开发人员门户中浏览你的应用

      将应用导入开发人员门户后，可以查看其详细信息，包括清单文件。

      #### <a name="view-app-information"></a>查看应用信息

      1. 从 **开发人员门户** 的左窗格中选择基本信息。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/dev-portal-left-pane-basic.png" alt-text="图像显示开发人员门户的左窗格" border="false":::

      1. 请注意基本信息中的以下信息：
          - 应用程序 ID
          - 开发人员信息
          - 应用 URL

      1. 从 **左窗格中** 选择"品牌"以查看品牌信息。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-app-branding.png" alt-text="显示应用品牌信息的图像" border="false":::

          如果你要编写要分发的新应用，这些详细信息非常重要。

      #### <a name="view-app-features"></a>查看应用功能

      - 从 **开发人员门户** 的左窗格中选择应用功能。

          应用程序功能显示在右侧窗格中。 可以查看个人应用、自动程序以及邮件扩展的卡片。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-csharp-app-features.png" alt-text="显示应用功能的图像" border="false":::

      #### <a name="view-the-app-manifest"></a>查看应用清单

      使用清单文件为应用配置功能、必需资源和重要属性。

      - 从 **左侧** 面板中选择"发布"以打开下拉列表，然后选择应用 **包**。

          应用程序清单显示在右侧窗格中。
          
          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-app-manifest.png" alt-text="显示开发人员门户中的应用清单文件的图像" border="false":::

          清单文件显示在右侧窗格中。

      ### <a name="configure-your-apps-capabilities"></a>配置应用的功能

      将应用导入开发人员门户后，下一步是配置应用功能。 开发人员门户包含不同部分中的所有应用信息。 它使配置应用功能变得简单。

      使用开发人员门户，你可以：
      1. [配置个人选项卡应用](#configure-personal-tab-app)
      1. [配置自动程序](#configure-bot)
      1. [配置邮件扩展](#configure-message-extension)

      #### <a name="configure-personal-tab-app"></a>配置个人选项卡应用

      配置个人选项卡应用：

      1. 选择" :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png"::: 应用功能"窗格 **上** "个人"应用卡 **上的图标** ，然后选择"编辑 **"**。

          将显示 Hello 选项卡的详细信息。

      1. 选择 Hello :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png"::: 选项卡的图标， **然后选择"编辑** "打开应用详细信息以进行更新。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-edit-tab.png" alt-text="显示 Hello 选项卡菜单的图像" border="false":::

      1. 在将选项卡添加到你的个人应用中，输入 Hello **选项卡的应用详细信息**。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-add-tab.png" alt-text="显示 Hello 选项卡详细信息的图像" border="false":::

          输入以下详细信息：
          - **名称**：Hello 选项卡。
          - **内容 URL** **和网站 URL**：ngrok 控制台会话中的转发地址。
          - **上下文**：选择 **"个人"选项卡**。

      1. 选择“**更新**”。

          "Hello"选项卡的详细信息显示在"个人 **"应用程序窗格中** 。

      1. 选择“**保存**”。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-save.png" alt-text="显示要保存的 Hello 选项卡详细信息的图像" border="false":::

          " **个人应用程序** "窗格现在显示自动创建的新选项卡和"关于"选项卡。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-saved.png" alt-text="显示&quot;Hello&quot;选项卡和&quot;关于&quot;选项卡详细信息的图像" border="false":::

      #### <a name="configure-bot"></a>配置自动程序

      将聊天机器人功能添加到你的应用很简单。 Hello World 示例应用已包含自动程序作为示例的一部分，但你必须使用 Teams。

      :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-no-id.png" alt-text="显示无应用 ID 导入的自动程序应用的图像" border="false":::

      从示例导入的机器人没有关联的应用 ID。 你将需要将其删除，并创建新的自动程序。 开发人员门户创建新的应用 ID，并注册Teams。

      添加和配置自动程序涉及：

      1. [添加新机器人](#to-add-a-new-bot)
      1. [将机器人添加到应用](#to-add-bot-to-app)
      1. [配置自动程序作用域](#to-configure-bot-scope)

      ##### <a name="to-add-a-new-bot"></a>添加新机器人

      1. 选择" :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png"::: 应用功能"窗格上 **"** 自动程序"卡 **上的图标** ，然后选择"删除 **"**。

      1. 选择 **"工具** "以添加功能。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/tools-option.png" alt-text="显示&quot;工具&quot;选项的图像" border="false":::

      1. 选择 **"工具"窗格** 上的 **"自动程序管理** "。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-tools-bot-card.png" alt-text="显示自动程序管理窗格的图像" border="false":::

      1. 选择 **"自动程序管理** "窗格中的"+ **新建自动程序** "。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-management-new-bot.png" alt-text="显示新自动程序选项的图像" border="false":::

      1. 输入适用于自动程序的名称，然后选择"添加 **"**。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-add-bot.png" alt-text="显示如何添加机器人的图像" border="false":::

          The **Configure** pane appears showing details of the new bot in the left pane.

      1. 从控制台输入转发 URL `ngrok` ，然后选择"保存 **"**。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-endpoint.png" alt-text="显示如何添加自动程序终结点的图像" border="false":::

      1. 选择 **"客户端** 密码"，然后选择 **"将客户端** 密码添加到机器人"，为机器人生成密码。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-client-secrets.png" alt-text="显示&quot;客户端密码&quot;部分的图像" border="false":::

          开发人员门户为自动程序生成密码。

          可以使用图标 :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/copy-icon.png"::: 复制密码。 对于本教程，你无需复制它。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-client-secret-generated.png" alt-text="显示生成的客户端密码的图像" border="false":::

      1. 选择“确定”。

      1. 选择 **<自动** 程序"返回到 **自动程序管理** 窗格。

          自动 **程序管理** 窗格显示使用应用 ID 添加的新自动程序。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-bot-added.png" alt-text="显示具有应用 ID 的新自动程序的图像" border="false":::

      1. 确保保存自动程序 ID 以及客户端密码 **部分中** 的密码。

      ##### <a name="to-add-bot-to-app"></a>将机器人添加到应用

      1. 打开" **应用功能"** 窗格，然后选择 **"自动程序"** 卡。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-card.png" alt-text="显示自动程序卡的图像" border="false":::

          将显示 **"自动程序** "窗格。

      1. 从"选择现有自动程序 **"中选择自动** 程序应用，然后选择"保存 **"**。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-select-bot-app.png" alt-text="显示如何选择现有自动程序应用的图像" border="false":::

          新自动程序将添加到具有其自己的应用 ID 的应用。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-new-bot-added.png" alt-text="显示已添加到应用的新自动程序的图像" border="false":::

      ##### <a name="to-configure-bot-scope"></a>配置自动程序作用域

      1. 选择新 :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png"::: 自动 **程序卡上的** 图标，然后选择"编辑 **"**。

      1. 在"自动 **程序"** 窗格中移动以查看" **命令"** 部分，然后选择 **"+ 添加命令"**。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-add-command.png" alt-text="显示命令部分的图像" border="false":::

      1. 为命令输入合适的名称和 **说明**。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-add-bot-command.png" alt-text="显示如何添加命令详细信息的图像" border="false":::

      1. 选择该命令的所有三个范围，然后选择"添加 **"**。
          - 个人
          - **团队**
          - **群聊**

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-command-add.png" alt-text="显示如何保存命令详细信息的图像" border="false":::

          新命令将添加到"自动 **程序"** 窗格的"命令 **"** 部分。

      1. 选择“**保存**”。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-save-new-bot-command.png" alt-text="显示要保存的命令详细信息的图像" border="false":::

          保存命令详细信息。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-bot-command-added.png" alt-text="显示保存的命令详细信息的图像" border="false":::

      1. 打开 **"应用功能** "窗格 **，然后选择"** 个人应用卡"以查看应用的选项卡详细信息。

          你将看到新聊天机器人的选项卡已添加到你的应用。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-tab-chat-tab-configured.png" alt-text="显示已配置的聊天选项卡的图像" border="false":::

      #### <a name="configure-message-extension"></a>配置邮件扩展

      消息扩展允许用户从你的服务请求信息并发布该信息。 信息以卡片的形式张贴到频道对话中。 邮件扩展显示在撰写框的底部。

      添加新邮件扩展名：

      1. 选择" :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/ellipse-icon.png"::: 应用功能 **"窗格上** "邮件扩展"卡 **上的** 图标，然后选择"删除 **"**。

      1. 从 **"应用功能** "窗格中 **选择"邮件扩展** "。

      1. 从"消息扩展"窗格上的" **选择** 现有自动程序"下拉列表中选择自动 **程序应用** 的名称。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-select-bot.png" alt-text="显示选择自动程序的消息扩展窗格的图像" border="false":::

      1. 选择“**保存**”。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-select-msgext-bot.png" alt-text="显示邮件扩展窗格的图像" border="false":::

          保存邮件扩展名，" **命令** "部分显示在"邮件扩展 **"窗格中** 。

      1. 选择 **+ 添加命令** 以定义邮件扩展应用可以执行的范围。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-command.png" alt-text="显示&quot;命令&quot;部分的图像" border="false":::

          " **添加命令"** 对话框。

      1. 确保 **选择** "搜索"作为要添加到"添加命令"对话框中 **的命令** 类型。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-new-command.png" alt-text="显示&quot;添加命令&quot;对话框的图像" border="false":::

      1. 输入以下详细信息的合适信息：
          - 命令 ID
          - 命令标题
          - 命令说明

      1. 在对话框中移动以查看其余详细信息。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-add-command-b.png" alt-text="显示&quot;添加命令&quot;对话框中的剩余详细信息的图像" border="false":::

      1. 确保 **选中"设置为** 默认值"。
      1. 为邮件扩展命令选择以下上下文：
          - 命令框
          - 撰写框
          - 邮件
      1. 输入以下详细信息的合适信息：
          - 参数名称
          - 参数标题
          - 参数说明

      1. 选择 **"** 文本"作为输入类型。
      1. 选择“**保存**”
      1. 邮件扩展命令已保存，显示在"邮件扩展"窗格中的命令 **列表中** 。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/devp-msgext-command-added.png" alt-text="显示已添加命令的图像" border="false":::

      1. 选择“**保存**”。
      1. 打开 **"应用功能"** 窗格。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/nj-app-capabilities-configured.png" alt-text="显示为 Hello World 应用配置的功能的图像" border="false":::

          你将看到为 Hello World 应用配置的所有三项功能-个人选项卡应用、机器人和消息扩展。
  - title: 预览和测试Node.js应用
    durationInMinutes: 1
    content: |

      导入应用并配置开发人员门户中的功能后，可以预览和测试示例应用。

      ## <a name="preview-your-app-in-teams"></a>在应用中预览Teams

      配置应用功能后，可以在本地环境中Teams预览和测试应用。

      预览应用：

      1. 从 **"开发人员Teams** 工具栏中选择"预览"。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/preview-in-teams.png" alt-text="显示&quot;预览&quot;按钮的图像" border="false":::

          开发人员门户会通知你你的应用已成功旁加载。

      1. 选择 **"管理应用"**。
         你的应用在旁加载的应用中列出。 
      1. 使用搜索框查找你的应用，选择其行中的三个点。
      1. 选择" **视图"** 选项。
          **将显示应用的**"添加"页面。
      1. 选择 **"添加**"以在加载项上Teams。

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/add-nodejs-app-sideload.png" alt-text="显示&quot;添加应用&quot;对话框的图像" border="false":::

          你的应用现已在 Teams。 可以查看所有选项卡并测试以下功能：

          - Hello 选项卡：

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/helloworld-tab.png" alt-text="在本地环境中显示 Hello 选项卡的图像" border="false":::

          - 聊天机器人：

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/helloworld-bot.png" alt-text="显示本地环境中应用自动程序的图像" border="false":::

              可以使用聊天发送消息。

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/helloworld-bot-chat.png" alt-text="显示本地环境中聊天的图像" border="false":::

          - 邮件扩展名：

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/helloworld-msgext.png" alt-text="显示本地环境中邮件扩展的图像" border="false":::

              可以使用邮件扩展名尝试搜索。

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/helloworld-msgext-query.png" alt-text="显示在本地环境中使用邮件扩展进行搜索的图像" border="false":::

          - 关于选项卡：

              :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/helloworld-about.png" alt-text="显示本地环境中&quot;关于&quot;选项卡的图像" border="false":::