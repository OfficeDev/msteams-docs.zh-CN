### YamlMime:Tutorial
title: 使用 JavaScript 生成通知机器人
metadata:
  title: 使用 JavaScript 生成通知机器人
  description: 在本教程中，你将了解如何使用 Teams 工具包创建新的通知机器人，从而使用 JavaScript 发送通知。
  audience: Developer
  level: Beginner
  ms.date: 05/04/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/add-capability.md
  nextTutorialTitle: 返回“添加功能”
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: dc4d10468dee480e3ef231fe999ec5012f51a7b6
  ms.sourcegitcommit: 10debe0f01574a21aab54bfac692a4c8373263a8
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 10/31/2022
  ms.locfileid: "68789996"
items:
- durationInMinutes: 1
  content: >
    通知机器人在 Teams 频道、群组聊天或个人聊天中主动发送消息。 可以使用 HTTP 请求（如卡片或文本）触发通知机器人。


    在本教程中，你将了解：


    - 如何使用 Teams 工具包创建新的通知机器人。

    - 关于应用的目录结构。

    - 如何发送多个通知。


    本分步指南可帮助你使用 Teams 工具包生成通知机器人。 你将看到以下输出：

      :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="触发器输出"border="true":::
- title: 先决条件
  durationInMinutes: 1
  content: "\n下面是生成和部署应用所需的工具列表。\n\n| &nbsp; | 安装 | 使用 |\n| --- | --- | --- |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript 或 TypeScript 生成环境。 使用最新版本。 |\n| &nbsp; | [Teams 工具包](#install-the-teams-toolkit) | Microsoft Visual Studio Code扩展，用于为应用创建项目基架。 使用版本 4.0.0。 |\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | 后端 JavaScript 运行时环境。 使用版本 14 或 16。|\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams 可在一个位置通过聊天、会议、通话等应用与你合作的每个人进行协作。|\n| &nbsp; | [微软&nbsp;Edge (建议](https://www.microsoft.com/edge)) 或 [Google Chrome](https://www.google.com/chrome/) | 包含开发人员工具的浏览器。 |\n| &nbsp; | [Microsoft 365](https://developer.microsoft.com/en-us/microsoft-365/dev-program) | 具有安装应用的相应权限的 Teams 帐户的访问权限。 |\n\n> [!NOTE]\n> 本指南在 Teams 工具包版本 4.0.0 和 Nodejs 版本 14 和 16 上进行测试。 本指南中的步骤可能适用于其他版本，但尚未测试。\n\n## <a name=\"prepare-development-environment\"></a>准备开发环境\n\n安装所需的工具后，设置开发环境。\n\n### <a name=\"install-the-teams-toolkit\"></a>安装 Teams 工具包\n\nTeams 工具包通过为应用预配和部署云资源、发布到 Teams 应用商店等工具来帮助简化开发过程。 \n \n可以将工具包与 Visual Studio Code 或 CLI (命令行接口) 配合使用，称为 `TeamsFx`。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. 打开Visual Studio Code，然后选择“**扩展**” (**Ctrl+Shift+X** / **⌘⇧-X** 或 **“查看>扩展**) ”。\n1. 在搜索框中，输入 **Teams 工具包**。\n1. 选择 Teams 工具包旁边的 **“安装** ”。\n\n :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/teams-toolkit.png\" alt-text=\"图中显示了 Teams 工具包扩展安装。\":::\n\n 安装后，Teams 工具包图标将显示在Visual Studio Code边栏中。\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"图中显示了Visual Studio Code边栏中的 Teams 工具包图标。\":::\n\n还可以在[Visual Studio Code市场](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension)中找到 Teams 工具包。\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n若要安装 TeamsFx CLI，请使用 `npm` 包管理器：\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\n根据配置，可能需要使用 `sudo` 来安装 CLI：\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\n它在 Linux 和 macOS 系统上更常见。\n\n确保将 npm 全局缓存添加到 PATH。 此步骤通常作为Node.js安装程序的一部分完成。  \n\n可以将 CLI 与 命令一起使用 `teamsfx` 。 通过运行 `teamsfx -h`测试命令是否正常工作。\n\n> [!NOTE]\n> 在 PowerShell 终端中运行 TeamsFx 之前，请确保为 PowerShell 启用 **远程签名** 的执行策略。\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>设置 Teams 开发租户\n\n**租户** 类似于空间或容器，你可以在 Teams 中为组织聊天、共享文件和运行会议。 还可以旁加载和测试应用。\n\n### <a name=\"check-for-sideloading-option\"></a>检查旁加载选项\n\n创建应用后，必须在 Teams 中加载应用，而无需分发它。 这称为旁加载。 登录到 Microsoft 365 帐户以查看此选项。\n\n > [!NOTE]\n > 在 Teams 本地环境中预览和测试应用时，需要旁加载。 启用旁加载以在本地 Teams 中预览和测试应用。\n\n是否已拥有租户，并且是否具有管理员访问权限？ 让我们来看看你是否真的这样做了！\n\n在 Teams 中验证旁加载应用：\n\n 1. 在 Teams 客户端中，选择“ **应用商店**”。\n 1. 选择“**管理应用**”。\n 1. 选择 **“上传应用**”。\n 1. 查找“ **上传自定义应用**”选项。 如果看到 选项，则表示已启用旁加载应用。\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"图中显示了在 Teams 中上传自定义应用的选项。\":::\n\n     > [!NOTE]\n     > 如果没有看到上传自定义应用的选项，请联系 Teams 管理员。\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>创建免费的 Teams 开发人员租户 (可选) \n\n如果没有 Teams 开发人员帐户，可以免费获取它。 加入 Microsoft 365 开发人员计划！\n\n1. 转到 [Microsoft 365 开发人员计划](https://developer.microsoft.com/microsoft-365/dev-program)。\n1. 选择“ **立即加入** ”，然后按照屏幕上的说明进行操作。\n1. 从欢迎屏幕中选择 **“设置 E5 订阅** ”。\n1. 设置管理员帐户。 完成后，将显示以下屏幕。\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. 使用新的管理员帐户登录到 Teams。 现在，应具有 **“上传自定义应用** ”选项。\n"
- title: 生成通知机器人
  durationInMinutes: 1
  content: "**使用 Visual Studio Code 生成通知机器人**\n\n 1. 打开 Visual Studio Code。\n \n 1. 在 Visual Studio Code 边栏中选择 Teams 工具包 :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: 图标。\n\n 1. 选择 **创建新的 Teams 应用**。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/create-new-teams-app.png\" alt-text=\"Teams 工具包边栏中&quot;创建新项目&quot;链接的位置。\":::\n\n 1. 选择“ **创建新的 Teams 应用** ”选项，使用 Teams 工具包创建应用。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/create-new-app.png\" alt-text=\"启动用于创建新项目的向导\":::\n\n 1. 确保已选择 **通知机器人** 作为要在应用中生成的功能。 \n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-notification-bot.png\" alt-text=\"选择“应用功能”\":::\n\n 1. 选择 **“HTTP 触发器 Restify 服务器** ”作为触发器。 \n 1. 选择“**确定**”。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-trigger.png\" alt-text=\"显示如何选择编程语言的屏幕截图。\":::  \n\n 1. 选择 **JavaScript** 作为编程语言。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-script.png\" alt-text=\"显示如何选择编程语言的屏幕截图。\":::    \n\n 1. 选择“ **默认文件夹** ”，将项目根文件夹存储在默认位置。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-default-location.png\" alt-text=\"选择默认位置\":::\n \n    还可以通过以下步骤更改默认位置：\n\n     1. 选择“ **浏览**”。\n\n         :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-browse.png\" alt-text=\"选择浏览位置\":::\n         \n     1. 选择项目工作区的位置。\n\n     1. 选择 **“选择文件夹**”。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-folder.png\" alt-text=\"选择文件夹\":::\n \n 1. 为应用输入合适的名称，例如 mynotificationbot 作为应用程序名称。 \n 1. 选择“**Enter**”。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/type-notfication-name.png\" alt-text=\"显示输入应用名称的位置的屏幕截图。\":::\n\n    > [!NOTE]\n    > 确保在应用程序名称中仅使用字母数字字符。\n\n 1. 默认情况下，项目将在 10 秒内以新窗口打开。 如果要在当前窗口中打开，请选择“ **在当前窗口中打开**”。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/new-window-notification.png\" alt-text=\"新建窗口通知\":::\n\n     通知机器人应用在几秒钟内创建。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/my-notification-bot.png\" alt-text=\"显示已创建的应用的屏幕截图。\":::\n\n 1. 从Visual Studio Code边栏中选择 **“运行和调试”**:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\":::图标。\n\n 1. 从下拉列表中选择 **“调试 (Edge)** ”或 **“调试 (Chrome)** ”。\n\n 1. 选择“ **开始调试** ”按钮。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/debug-app.png\" alt-text=\"应用调试\"border=\"true\"::: \n\n 1. 选择“**添加**”。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/my-notification-output.png\" alt-text=\"我的通知输出1\"border=\"true\":::\n\n 1. 打开 **Windows PowerShell**。\n\n 1. 运行 `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` 命令。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png\" alt-text=\"Powershell 触发器\"border=\"true\":::   \n\n     你将在 Teams 中获取以下输出：\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png\" alt-text=\"触发器输出\"border=\"true\":::\n\n ## <a name=\"take-tour-of-source-code\"></a>了解源代码\n\n Teams 工具包提供用于生成应用的组件。 创建项目后，可以在 Visual Studio Code 的 **“资源管理器”** 区域中查看项目文件夹和文件。\n\n :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/folder-structure1.png\" alt-text=\"“结构”选项卡\":::\n\n 如果选择使用 UI 框架，则以下示例模板代码提供了一个基架，其中包含React组件。\n\n 新项目文件夹包含以下内容：\n\n | 文件夹名 | 目录 |\n | --- | --- |\n | `.fx` | 项目级别的设置、配置和环境信息 |\n | `.vscode` | 用于本地调试的 VS 代码文件 |\n | `bot` | 机器人源代码 |\n | `templates` | Teams 应用清单和相应 Azure 资源的模板 |\n \n  **机器人** 文件夹中的核心通知实现，它包含：\n\n | 文件名 | 目录 |\n | --- | --- |\n | `src/adaptiveCards/` | 自适应卡片模板  |\n | `src/internal/` | 为通知功能生成了初始化代码 |\n | `src/index.*s` | 用于处理机器人消息和发送通知的入口点 |\n | `.gitignore` | 要从机器人项目中排除本地文件的文件 |\n | `package.json` | 机器人项目的 npm 包文件 |\n"
- title: 向 Teams 频道发送通知
  durationInMinutes: 1
  content: "**向 Teams 频道发送通知**\n\n1. 在“Visual Studio Code **”资源管理器**“下，选择”**MYNOTIFICATIONBOT>机器人> src> index.js**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/file-path.png\" alt-text=\"文件路径\":::\n\n   你将看到以下页面：\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/default-program.png\" alt-text=\"默认程序\":::\n\n1. 在 Visual Studio Code 中使用以下`for (const target of await bot.notification.installations()) { `代码。\n\n     ```bash\n     if (target.type === \"Channel\") {\n       const members = await target.members();\n       await target.sendMessage(\"This is a message to channel: \" + members.length + \" members.\");\n       for (const member of members) {\n         await member.sendMessage(\"This is a message to Member: \" + member.account.email);\n       }\n     }\n     /* \n     ```  \n\n      :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/code-add.png\" alt-text=\"代码添加\":::\n\n    **若要自定义存储，请：**\n\n    1. 在“Visual Studio Code **”的“资源管理器”** 下，选择“**MYNOTIFICATIONBOT>机器人> src>内部> initialize.js**”。\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/initialize-storage.png\" alt-text=\"存储初始化\":::\n    \n       你将看到以下页面：\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/storage-code.png\" alt-text=\"存储代码\":::\n\n    1. 更新 **initialize.js** 文件中的以下代码以自定义存储。\n\n         ```bash\n         const myStorage = new MyStorage(...);\n\n         // initialize ConversationBot with notification enabled and customized storage\n         const bot = new ConversationBot({\n             // The bot id and password to create BotFrameworkAdapter.\n             // See https://aka.ms/about-bot-adapter to learn more about adapters.\n             adapterConfig: {\n                 appId: process.env.BOT_ID,\n                 appPassword: process.env.BOT_PASSWORD,\n             },\n             // Enable notification\n             notification: {\n                 enabled: true,\n                 storage: myStorage,\n             },\n          });\n         ```  \n    1. 使用自己的存储位置，而不是 **MyStorage**。\n\n        > [!NOTE]\n        > 需要将自己的存储用于生产环境。 如果未提供存储，则考虑默认本地文件存储。\n\n1. 从Visual Studio Code边栏中选择 **“运行和调试”**:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\":::图标。\n\n1. 从下拉列表中选择 **“调试 (Edge)** ”或 **“调试 (Chrome)** ”。\n\n1. 选择“ **开始调试** ”按钮。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/debug-app.png\" alt-text=\"应用调试\":::\n\n    你将在 Teams 中获取以下输出。\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/app-installation.png\" alt-text=\"应用安装\":::\n\n1. 在下拉列表中选择“ **添加到团队** ”。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/app-installation1.png\" alt-text=\"我的通知输出1\":::\n\n1. 在 **“搜索”框中**，添加任何 **频道**。\n1. 选择 **“设置机器人**”。\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/setup-bot.png\" alt-text=\"设置机器人\":::\n\n   将显示以下屏幕：\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/channel-notification.png\" alt-text=\"Channe1 通知\":::\n\n1. 打开 **Windows PowerShell**。\n\n1. 运行 `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` 命令。\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png\" alt-text=\"Powershell 触发器\"border=\"true\":::   \n\n   你将在 Teams 频道中收到通知：\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/channel-output.png\" alt-text=\"通道输出\":::\n\n   你将在个人聊天中收到通知：         \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/member-output.png\" alt-text=\"member-output\":::\n"
- title: 部署第一个 Teams 应用
  durationInMinutes: 1
  content: "\n你已了解如何使用通知机器人功能生成和运行 Teams 应用。 最后一步是将应用部署到 Azure。\n\n让我们使用 Teams 工具包在 Azure 上部署具有通知机器人功能的第一个应用。\n\n## <a name=\"sign-in-to-your-azure-account\"></a>登录到 Azure 帐户\n\n使用你的帐户访问 Microsoft Azure 门户并提供预配新的云资源来支持你的应用。\n\n1. 打开 Visual Studio Code。\n1. 打开在其中创建了通知机器人应用的项目文件夹。\n1. 选择边栏中的“Teams 工具包”  :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: 图标。\n1. 选择“ **登录到 Azure**”。\n\n    > [!TIP]\n    > 如果已安装 Azure 帐户扩展并使用相同的帐户，则可以跳过此步骤。\n\n    此时会打开默认 Web 浏览器，以便登录帐户。\n1. 使用凭据登录到 Azure 帐户。\n1. 出现提示时关闭浏览器并返回到Visual Studio Code。\n\n    边栏的 **“帐户** ”部分分别显示这两个帐户。 它还列出了可用的 Azure 订阅数。 \n    \n    > [!NOTE]\n    > 确保至少有一个可用的 Azure 订阅可用。\n\n    现在可以将应用部署到 Azure 了！\n\n## <a name=\"deploy-your-app-to-azure\"></a>将应用部署到 Azure。\n\n  在 **“部署**”下，可以预配必要的云资源，并将应用的代码复制到创建的云资源中。\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. 在 Visual Studio Code 边栏中选择 Teams 工具包 :::image type=\"icon\" source=\"~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: 图标。\n\n1. 在“**部署**”下 **选择“在云中预配**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/provision-cloud.png\" alt-text=\"显示预配命令的屏幕截图\":::\n\n1. 选择现有资源组或创建新资源组。 有关详细信息，请参阅 [创建资源组](/azure/azure-resource-manager/management/manage-resource-groups-portal#create-resource-groups)。\n\n1. 选择现有订阅中的任何一个。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/select-subscription.png\" alt-text=\"显示现有订阅选择的屏幕截图。\":::\n\n1. 选择现有资源组或创建新资源组。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/subscription-cloud.png\" alt-text=\"显示用于预配的资源的屏幕截图。\":::\n\n   > [!NOTE]\n   > 此时会显示一个对话框，指出在 Azure 中运行资源时可能会产生成本。\n\n1. 选择“ **预配**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/provision-confirm1.png\" alt-text=\"预配对话框的屏幕截图。\":::\n\n   预配过程在 Azure 云中创建资源。 可以通过观察右下角的对话来监视进度。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-provision-success.png\" alt-text=\"显示“预配完成”对话框的屏幕截图。\":::\n\n     你将看到用于查看预配资源的选项。 在本教程中，无需查看资源。\n\n1. 在预配完成后，在“**部署**”下选择“**部署到云**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-cloud.png\" alt-text=\"显示选择部署到云的位置的屏幕截图。\":::\n\n1. 选择“部署”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/Deploy-confirm.png\" alt-text=\"部署以确认。\":::\n\n   部署需要一些时间。 可以在右下角的对话框中监视进度。\n    \n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-confirmation-cloud.png\" alt-text=\"部署确认。\":::\n\n1. 从Visual Studio Code选择 **“环境**”下的“**本地调试**”。\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/local-debug.png\" alt-text=\"本地调试。\":::\n\n1. 从下拉列表中选择 **“调试边缘** ”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/debug-cloud.png\" alt-text=\"本地调试。\":::\n\n1. 选择“**添加**”。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/app-cloud-output.png\" alt-text=\"应用云输出。\":::\n\n1. 打开 **Windows PowerShell**。\n\n1. 运行 `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` 命令。\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/windows-powershell1.png\" alt-text=\"Windows Powershell\":::\n\n    你将在 Teams 中收到通知：\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/cloud-final-output.png\" alt-text=\"云最终输出\":::\n\n# <a name=\"command-line\"></a>[命令行](#tab/cli)\n\n在终端窗口中：\n\n1. 运行 `teamsfx new` 以创建新项目。\n\n   ``` bash\n   teamsfx new\n   ```\n\n1. 运行 `teamsfx provision` 以创建 Azure 资源。\n\n   ``` bash\n   teamsfx provision\n   ```\n\n1. 运行 `teamsfx deploy` 以部署应用。\n\n   ``` bash\n   teamsfx deploy\n   ```\n\n1. 运行 `teamsfx preview` 以运行应用。\n\n   ``` bash\n   teamsfx preview\n   ```\n\n---\n"
- title: 完成挑战
  durationInMinutes: 1
  content: >
    你想出了这样的东西吗？

     :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="触发器输出"border="true":::
- content: 你已完成生成通知机器人的教程！
