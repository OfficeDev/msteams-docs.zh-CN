### YamlMime:Tutorial
title: 发送主动消息
metadata:
  title: 发送主动消息
  description: 在本模块中，了解如何从机器人发送主动消息，例如欢迎消息、计划的消息和通知
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: 详细了解主动消息
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 6d1b65556820f07487371328209b29570d3e2e72
  ms.sourcegitcommit: e16b51a49756e0fe4eaf239898e28d3021f552da
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 06/04/2022
  ms.locfileid: "65887679"
items:
- durationInMinutes: 1
  content: "主动消息是机器人发送的任何消息，该消息不是响应来自包含消息的用户发出的请求，例如：\n - 欢迎消息\n - Notifications\n - 计划的消息\n \n本分步指南可帮助你从机器人发送主动消息。 你将看到以下输出：\n\n* 聊天中的主动 Hello 消息        \n![在聊天中主动打招呼](~/assets/images/proactive-scenario/proactive-helo.png)\n\n* 主动打招呼消息作为自适应卡片    \n![自适应卡片中的主动 hello](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png) \n"
- title: 先决条件
  durationInMinutes: 2
  content: "确保安装以下内容：    \n\n* [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)。\n* [ASP.NET 和 Web 开发](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer)，或 [.NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer) 跨平台开发工作负荷。\n* [ngrok](https://ngrok.com/download)：一个跨平台应用程序，可让你以最少的努力将本地开发服务器公开到 Internet。\n* [获取免费的 Teams 开发人员租户](https://developer.microsoft.com/microsoft-365/dev-program)。\n"
- title: 设置本地环境
  durationInMinutes: 3
  content: "1.  下载 (Zip 文件) 示 [例代码](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) 并提取文件。\n1.  转到提取的文件，然后双击 **ProactiveBot.csproj**。 解决方案将在 Visual Studio 中打开。\n1.  在 Visual Studio 中，右键单击项目 (**ProactiveBot**) ，然后选择 **“生成** ”以生成解决方案。\n\n    ![主动机器人项目](~/assets/images/proactive-scenario/proactivebot-project.png)\n\n    <br>\n\n    <details>\n\n    <summary><b>疑难解答</b></summary>\n\n    如果 **出现无法找到包** 错误，请执行以下步骤：\n\n    1.  转到 **“工具** > **NuGet 包管理** > **器包管理器设置**”。\n    1.  在显示的 **“选项”** 窗口中，选择 **NuGet 包管理器** > **包源**。\n    1.  选择“**添加**”。\n    1.  在 **“名称**”和`https://api.nuget.org/v3/index.json`“**源**”字段中输入`nuget.org`。\n    1.  选择 **“更新** ”和 **“确定**”。\n    1.  重新生成项目。\n    <br>\n\n    </details>\n    \n1. 解压缩以安装 ngrok。\n   * Windows：双击 `ngrok.zip`。\n   * Linux 或 OS X：从终端中解压缩 ngrok 并运行 `unzip /path/to/ngrok.zip` 命令。\n1. 使用以下参数从命令行运行 ngrok：\n\n    `ngrok http 3978 --host-header=localhost`  \n    \n1. 复制映像) 中突出显示的 ngrok URL (，以便在后续步骤中进一步引用为 ngrok 基本 URL。 \n\n    ![ngrok 基本 URL](~/assets/images/proactive-scenario/ngrok-base-url.png)   \n"
- title: 创建和安装 Teams 应用
  durationInMinutes: 5
  content: "1. 转到 Teams > **App Studio** ，并导 `AppManifest.zip` 入下载的示例代码中可用的文件 (Zip 文件) 。\n\n    ![App Studio 导入应用](~/assets/images/proactive-scenario/app-studio-import-app.png) \n\n1. 选择 **“设置机器人** > ”。\n\n    ![机器人设置](~/assets/images/proactive-scenario/bot-setup.png)  \n\n1. 在 **“设置机器人** ”窗口中，输入 **名称** (，例如 **“主动消息演示** ”) 。\n1. 选择 **“个人** ”，然后选择 **“创建机器人** ”以创建机器人。\n\n    ![创建机器人 ID](~/assets/images/proactive-scenario/create-bot-id.png)   \n\n1. 将 **/api/messages** 追加到已复制) 并将其设置为 **Bot 终结点地址** 的 ngrok 基本 URL (。 你的 URL 如下所示： `https://yourngrokdomain.ngrok.io/api/messages`.\n\n    ![机器人终结点地址](~/assets/images/proactive-scenario/bot-endpoint-address.png)\n\n1. 等待几秒钟才能使更改生效。     \n\n    > 如果需要更长的时间，请选择 **“选项卡** ”，然后选择 **“机器人”** 部分以强制更新。\n    \n1. 选择 **“生成新密码** ”以生成新的应用密码并将其复制。 \n\n    ![生成应用密码](~/assets/images/proactive-scenario/generate-app-password.png)\n\n1. 转到 Visual Studio 并打开 **appsettings.json** 文件。  粘贴密码作为值 `MicrosoftAppPassword`。    \n1. 转到 **App Studio** 并复制应用 ID。 \n\n    ![生成应用 ID](~/assets/images/proactive-scenario/generate-app-id.png)\n\n1. 转到 Visual Studio 并打开 **appsettings.json** 文件。  粘贴应用 ID 作为值 `MicrosoftAppId`。 你 `appsettings.json` 将具有以下设置值：    \n\n    ![Appsetting 值](~/assets/images/proactive-scenario/app-setting-values.png)\n\n1. 按 **F5** 或选择 **IIS Express** 以运行代码。\n\n    ![运行代码](~/assets/images/proactive-scenario/run-code.png)\n\n    将显示相应的主动消息示例：  \n\n    ![示例主动消息](~/assets/images/proactive-scenario/proactive-message-sample.png)\n\n1. 转到 **“测试”并分发** > **“安装** ”以再次安装同一应用。\n\n    ![安装应用](~/assets/images/proactive-scenario/install-app.png)   \n\n1. `http://localhost:3978/api/notify`选择 URL 以在聊天中获取主动打招呼消息。\n\n    ![发送的主动消息](~/assets/images/proactive-scenario/result.png)\n\n1. 转到 Teams。 安装成功时，会收到来自机器人的主动 Hello 消息。          \n\n    ![在聊天中主动打招呼](~/assets/images/proactive-scenario/proactive-helo.png)    \n"
- title: 将自适应卡片添加到主动消息
  durationInMinutes: 10
  content: "1. 在 Visual Studio 中，停止调试过程。\n\n    ![停止调试](~/assets/images/proactive-scenario/stop-debug.png)\n\n1. 右键单击 **“依赖项**”，选择 **“管理 NuGet 包**”。\n\n    ![添加自适应卡片包 1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)\n\n1. 在 **NuGet ProactiveBot** 中，选择 **“浏览** ”并搜索 **AdaptiveCards**。 \n1. 选择“**安装**”。 \n\n    ![添加自适应卡片包 2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)\n\n1. 打开 **NotifyController.cs** 文件，将现有 `BotCallback` 代码替换为以下代码以发送自适应卡片消息：     \n    \n   ```csharp\n   private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)\n    {\n                AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));\n\n                card.Body.Add(new AdaptiveTextBlock()\n                {\n                    Text = \"Proactive Hello\",\n                    Size = AdaptiveTextSize.ExtraLarge\n                });\n\n                card.Body.Add(new AdaptiveImage()\n                {\n                    Url = new Uri(\"http://adaptivecards.io/content/cats/1.png\")\n                });\n\n                Attachment attachment = new Attachment()\n                {\n                    ContentType = AdaptiveCard.ContentType,\n                    Content = card\n                };\n\n                await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));\n    }\n   ```\n\n1. 将鼠标悬停在波浪红线上，然后 **选择使用 AdaptiveCards** 来解决错误。 \n\n    ![解决错误](~/assets/images/proactive-scenario/resolve-error.png)  \n\n1. 按 **F5** 运行代码。 \n1. 转到 Teams 并卸载应用。 \n    \n    ![卸载应用](~/assets/images/proactive-scenario/uninstall-app.png) \n\n1. 重新安装同一应用以获取 `conversationUpdate` 事件。   \n\n1. 选择 [api/notify] `(http://localhost:3978/api/notify)` URL 以获取自适应卡片中的主动 Hello 消息。     \n"
- title: 完成质询
  durationInMinutes: 3
  content: >
    你想出了这样的事吗？ 自适应卡片中的主动 hello 消息如下所示：


    ![自适应卡片中的主动 hello](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)
- content: >-
    你已完成此方案。

    * 可以每天发送通知，也可以定期向用户请求反馈。

    * 处理限制限制以避免出现多个通知。
